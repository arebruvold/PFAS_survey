---
execute:
  warning: false
format:
  html:
    embed-resources: true
    code-fold: true
    toc: true
---
# Todo
-   Tables to docx if needed.
-   Could elaborate on results and model validation

# Data cleaning
```{r setup-cleaning}
# packages
library(tidyverse)
library(mgcv)
library(readxl)
library(ggmap)
library(janitor)
library(ggrepel)
library(GGally)
library(targets)
library(gt)
library(DataExplorer)
library(patchwork)
library(ggh4x)
library(ggthemes)
library(glmmTMB)
library(DHARMa)
library(performance)
library(MASS)
library(scales)
library(viridis)
library(gtsummary)
library(ggeffects)
library(multcomp)
library(broom)
library(broom.mixed)
library(parameters)
select <- dplyr::select
set.seed(12345)

# set theme
survey_theme <- theme_few()
theme_set(survey_theme)

## for renaming sample ids to fix inconsistencies
mareano_renamer <- function(ss_in) {
  
  sub_renamer <- function(ss_in){
  # check input
  stopifnot("requires single character string input." = length(ss_in) == 1 && is.character(ss_in))

  # for all strings remove spaces and replace BC with BX
  ss_out <- ss_in %>%
    str_replace_all("\\s", "") %>%
    str_replace_all("BC", "BX")
  # return if string do not contain MC or BX, as errors only with BX/MC
  if (str_detect(ss_out, "MC|BX", negate = TRUE)) {
    return(ss_out)}
  
  # part of name including BX/MC
  ss_prefix <- str_extract(ss_out, ".+[BXMC]+")
  # suffix-numbers with incoherent lengths
  ss_suffix <- str_extract(ss_out, "[0-9]+$")

  # change lengths
  if (str_length(ss_suffix) == 3) {
    return(ss_out)
  } else if (str_length(ss_suffix) == 2) {
    return(paste0(ss_prefix, "0", ss_suffix))
  } else if (str_length(ss_suffix) == 1) {
    return(paste0(ss_prefix, "00", ss_suffix))
  } else {
    # break with error message "suffix string not of length 1, 2 or 3":
    stop("suffix string not of length 1, 2 or 3")
  }
  }
  
  ss_out <-  map_chr(ss_in, sub_renamer)
  return(ss_out)
}


# to fix shifted column names
newnames <- (read_excel("data/Hele datasettet v2_corr.xlsx", skip = 178) %>% clean_names())[1, 16:29] %>% as_vector()

# appending correct column names
dataset <- read_excel("data/Hele datasettet v2_corr.xlsx", skip = 178) %>%
  clean_names() %>%
  rename_with(.cols = x16:x29, ~newnames) %>%
  clean_names() %>%
  slice(-1) %>%
  select(
    sample_id = sample,
    year = cruise_3,
    number = cruise_4,
    from_cm_o = sample_interval_top_bottom_5,
    to_cm_o = x6,
    longitude = dde,
    latitude = ddn,
    depth_m = mbsl,
    sample_id2 = x1096mc002,
    sample_id3 = sample_2,
    from_cm_i = sample_interval_top_bottom_12,
    to_cm_i = x13,
    clay_fraction,
    silt_fraction,
    mud = mud_percent,
    toc = toc_percent,
    pfos:pf_tri_a,
    s9_pfas = sum_9_pfas,
  ) %>%
  filter(
    !is.na(year)
  ) %>%
  mutate(across(!matches("sample"), as.numeric)) %>%
  # assign areas:
  mutate(
    area = case_when(
      row_number() %in% c(1:18) ~ "I",
      row_number() %in% c(19:45) ~ "II",
      row_number() %in% c(46:66) ~ "III",
      row_number() %in% c(67:89) ~ "IV",
      row_number() %in% c(90:95) ~ "V",
      TRUE ~ "Other"
    ),
    area = as.factor(area)
  ) %>%
  pivot_longer(
    cols = pfos:s9_pfas, names_to = "pfas", values_to = "pfas_value"
  ) %>%
  mutate(sample_id3 = mareano_renamer(sample_id3))

# import curated LOQs
loqs_raw <- read_excel("data/LOQs.xlsx") %>%
  clean_names() %>%
  select(-enhet) %>%
  rename(pfas = forbindelse)

loqs_years <- loqs_raw %>%
  filter(!(is.na(pfas))) %>%
  mutate(across(-pfas, ~ str_replace_all(.x, "\\<", "") %>% as.numeric()),
    pfas = make_clean_names(pfas)
  ) %>%
  rename_with(.cols = everything(), ~ str_replace(.x, "_2", "A") %>% str_replace("_3", "B")) %>%
  pivot_longer(cols = matches("\\d{4}"), names_to = "analysis_year", values_to = "loq")

loqs_samples <- loqs_raw %>%
  filter(is.na(pfas)) %>%
  rename_with(.cols = everything(), ~ str_replace(.x, "_2", "A") %>% str_replace("_3", "B")) %>%
  select(-pfas) %>%
  pivot_longer(
    cols = matches("\\d{4}"),
    names_to = "analysis_year",
    values_to = "sample_id"
  ) %>%
  drop_na() %>% 
  mutate(
    sample_id = mareano_renamer(sample_id)
  )

loqs <- left_join(
  loqs_years, loqs_samples,
  by = c("analysis_year")
)

# merge data, assign values below LOQ
pfas_raw <- left_join(dataset, loqs, by = c("pfas", "sample_id3" = "sample_id")) %>%
  select(-analysis_year) %>%
  select(sample_id3, year, area, longitude, latitude, mud, toc, pfas, pfas_value, loq)
  
pfas_data_eq0 <- pfas_raw %>%
  group_by(pfas) %>%
  mutate(max_loq = max(loq)) %>%
  mutate(
    pfas_value = case_when(
      pfas_value < max_loq ~ 0,
      TRUE ~ pfas_value
    )
  ) %>%
  ungroup() %>%
  group_by(sample_id3) %>%
  mutate(
    pfas_value = if_else(
      pfas == "s9_pfas",
      sum(pfas_value[pfas != "s9_pfas"], na.rm = TRUE),
      pfas_value
    )
  ) %>%
  select(-max_loq) %>% 
  mutate(
    pfas = case_when(
      pfas == "s9_pfas" ~ "Σ9PFAS",
      pfas == "pfos" ~ "PFOS",
      pfas == "pfoa" ~ "PFOA",
      pfas == "pfna" ~ "PFNA",
      pfas == "pf_un_a" ~ "PFUnA",
      pfas == "pf_hx_a" ~ "PFHxA",
      pfas == "pf_hp_a" ~ "PFHpA",
      pfas == "pf_dc_a" ~ "PFDcA",
      pfas == "pf_do_a" ~ "PFDoA",
      pfas == "pf_tri_a" ~ "PFTriA",
      TRUE ~ NA_character_
    )
  )

pfas_data_eq0_wide <- pivot_wider(pfas_data_eq0 %>% select(-c(loq)), names_from = pfas, values_from = pfas_value) %>% ungroup()

```

LOQs varied between different analytical batches and was set to the highest value across all years to avoid the LOQ becoming a confounder. To best represent the totality of the dataset, values below LOQ were set to 0. This decision results in conservative estimates for concentrations and in comparison to setting observations below LOQ to LOQ/2 resulted in a relative minor increase in the coefficient estimates for mud.

# Modeling

## Fit

A generalized linear model with Poisson-gamma distributed errors and a logarithmic link function was employed to analyze the zero-inflated data censored by the limits of quantification. This model incorporated the predictors area, TOC, and mud and was implemented using the 'glmmTMB' package in R. Data exploration showed mud to be collinear with TOC, and stepwise model selection based on Akaike's information criteria showed mud to have higher predictive value than TOC. Thus, area and mud were retained for the regression analysis. To test for differences between the areas, pairwise comparisons were performed using the 'multcomp' package with single-step p-value adjustment. Simulation-based model validation was carried out using the 'DHARMa' and 'ggeffects' packages. The code to reproduce the statistical analysis is provided in an online repository.



```{r model-fits}
pfas_glm <- function(in_dat){
  glmmTMB(data = in_dat, formula = pfas_value ~ area + mud, family = tweedie(link = "log"))
}

pfas_w_models <-
  pfas_data_eq0 %>%
  filter(!(pfas %in% c("PFHxA", "PFDoA", "PFTriA"))) %>%
  ## inspect effect of excluding ares with high PFAS concentrations and high mud content
  # filter(!(area %in% c("I", "V"))) %>%
  mutate(
    pfas = fct_relevel(pfas, c("Σ9PFAS", "PFOS", "PFOA", "PFNA", "PFUnA")),
    pfas_label = pfas
  ) %>%
  arrange(pfas) %>%
  group_by(pfas) %>%
  nest() %>%
  mutate(
    m_fit = map(data, pfas_glm),
    tidy = map(m_fit, ~ broom.mixed::tidy(.x, exponentiate = TRUE)),
    glance = map(m_fit, broom.mixed::glance),
    augment = map2(m_fit, data, ~ broom.mixed::augment(.x, .y)),
    pred = map(m_fit, ~ ggpredict(.x, terms = c("mud [1:100]", "area"))),
    simulated = map(m_fit, ~ simulate(.x, nsim = 25, seed = 12345)),
    sim_data = map2(
      simulated, data, ~ bind_cols(.x, .y) %>%
        pivot_longer(cols = matches("sim"), names_to = "simgroup", values_to = "sim") %>%
        rename(group = area)
    ),
    area_model = map2(m_fit, pfas, ~ glht(.x, linfct = mcp(area = "Tukey"))),
    # # validate the parameters:: implementation
    # area_hypothesis = map2(m_fit, pfas, ~ glht(.x, linfct = mcp(area = "Tukey")) %>%
    #   summary(test = adjusted(type = "single-step")) %>%
    #   tidy() %>%
    #   select(-c(term, null.value)) %>%
    #   mutate(estimate = exp(estimate))),
    reg_table = map(m_fit, ~ tbl_regression(.x, exponentiate = TRUE, tidy_fun = broom.mixed::tidy), estimate_fun = purrr::partial(style_ratio, digits = 3))
  )
```


## Model validation {#sec-model-validation}

<details>

<summary>Details and model validation</summary>

```{r model-sim}
sim_data <- pfas_w_models %>% 
  unnest(sim_data)

pred_data <- pfas_w_models %>% unnest(pred)

pred_data %>% ggplot(aes(x, predicted)) +
  geom_smooth(color = muted("red")) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  geom_point(data = sim_data, aes(x = mud, y = sim), alpha = 0.1, size = 0.2, color = muted("red"))+
  geom_point(aes(x = mud, y = pfas_value),
             data = sim_data %>% distinct(sample_id3, .keep_all = TRUE)) +
  facet_grid(pfas~group, scales = "free")+
  xlab("Mud [%]")+
  ylab("PFAS [\u03BCg/kg]")
```
Shown are the model fits on the original scale, with observations shown by black dots. Small red dots shows 25 simulations from the model for each combination of each observed value based on its covariate values.

```{r dharma-validation}
#| layout-ncol: 2
dharma_printer <- function(mod, in_dat) {
  sim_resid <- simulateResiduals(fittedModel = mod, n = 1000)
  pfas_name <- in_dat$pfas_label[1]
  ## for naming plots
  #   plot.new()
  # mtext(paste(pfas_name), cex = 4)
  testZeroInflation(sim_resid)
  mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)

  plotQQunif(sim_resid)
  mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)

  plotResiduals(sim_resid)
  mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+"), " (T-P=", glmmTMB:::.tweedie_power(mod) %>% round(digits = 3), ", d=", sigma(mod) %>% round(digits = 3), ")"), side = 4, col = 2, cex = 1.5)

  plotResiduals(mod, form = in_dat$area, sim_residlab = "Area")
  mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)

  plotResiduals(mod, form = in_dat$toc, sim_residlab = "TOC")
  mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)

  plotResiduals(sim_resid, form = in_dat$year, sim_residlab = "Year")
  mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)

  plotResiduals(sim_resid, form = in_dat$latitude, sim_residlab = "Latitude")
  mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)

  plotResiduals(sim_resid, form = in_dat$longitude, sim_residlab = "Longitude")
  mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)
  
  testSpatialAutocorrelation(sim_resid, x = in_dat$longitude, y= in_dat$latitude)
}

map2(pfas_w_models$m_fit, pfas_w_models$data, ~ dharma_printer(.x, .y))
```

Plots above show scaled quantile residuals using the DHARMa package. These are obtained by simulating from the fitted model and comparing to the observed residuals. The DHaRMa residuals are expected to be uniformly distributed around 0, red lines parallel and near the dotted grey lines. The quantile-quantile plot are expected to follow the 45-degree line. Plots are grouped by PFAS and area.

Observations:
* For Σ9PFAS, non-linear patterns observed is attributed to 

</details>

# Results

## Overview and summary
```{r map}
#| column: page
#| out-width: 100%

map_area_conc <-
  ggmap(tar_read(stadia_map)) +
  geom_point(aes(x = longitude, y = latitude, color = Σ9PFAS, fill = Σ9PFAS, shape = area), data = pfas_data_eq0_wide, position = position_dodge(width = 10), size = 2, alpha = 0.7) +
  labs(x = "Longitude [°E]", y = "Latitude [°N]") +
  scale_color_viridis(option = "magma") +
  scale_fill_viridis(option = "magma") +
  scale_shape_manual(values = c(21, 22, 23, 24, 25)) +
  #change legend label to Area and \u03A39PFAS:
  labs(color = "\u03A39PFAS", shape = "Area")+
  guides(fill = FALSE)

map_area_conc
```

```{r}
pfas_data_eq0_wide %>%
  group_by(area) %>%
  # mean, sd for each area for each of Σ9PFAS, toc, mud:
  summarise(
  #   Σ9PFAS = mean(Σ9PFAS, na.rm = TRUE),
  #   PFOS = mean(PFOS, na.rm = TRUE),
  #   PFOA = mean(PFOA, na.rm = TRUE),
  #   PFNA = mean(PFNA, na.rm = TRUE),
  #   PFUnA = mean(PFUnA, na.rm = TRUE),
  #   toc = mean(toc, na.rm = TRUE),
  #   mud = mean(mud, na.rm = TRUE),
  across(mud:Σ9PFAS, mean, na.rm = TRUE),
    n = n()
  ) %>% 
  gt() %>%
  fmt_number(columns = 2:13, decimals = 1) %>%
  tab_spanner(label = "Mean", columns = 2:13) %>%
  tab_header(title = "Summary of covariates by area, <LOQ = 0") %>%
  cols_label(
    area = md("**Area**"),
    Σ9PFAS = md("**\u03A39PFAS**"),
    PFHxA = md("**PFHxA**"),
    PFHpA = md("**PFHpA**"),
    PFDcA = md("**PFDcA**"),
    PFOS = md("**PFOS**"),
    PFOA = md("**PFOA**"),
    PFNA = md("**PFNA**"),
    PFTriA = md("**PFTriA**"),
    PFDoA = md("**PFDoA**"),
    PFUnA = md("**PFUnA**"),
    toc = md("**TOC**"),
    mud = md("**Mud**"),
    n = md("**n**")
  )
```

```{r}
pfas_prop <- pfas_data_eq0 %>%
  # for each area, calculate the proportion of each pfas:
  group_by(area, pfas) %>% 
  summarise(
    pfas_sum = sum(pfas_value, na.rm = TRUE),
  ) %>% 
  group_by(area) %>% 
  mutate(
    pfas_prop = pfas_sum / sum(pfas_sum[pfas != "Σ9PFAS"], na.rm = TRUE)
  ) %>% 
  filter(pfas != "Σ9PFAS")

ggplot(pfas_prop, aes(fill=pfas, y=pfas_prop, x=area)) + 
    geom_bar(position="stack", stat="identity")+
  scale_fill_brewer(palette="Set3")+
  xlab("Area")+ylab("Propotion")+
  #legend title PFAS:
  labs(fill = "")
```

## PFAS vs mud by area

```{r sum9}
pred_data %>%
  filter(pfas == "Σ9PFAS") %>%
  ggplot(aes(x, predicted)) +
  geom_smooth(color = muted("red")) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  geom_point(aes(x = mud, y = pfas_value),
    data = sim_data %>% filter(pfas == "Σ9PFAS") %>% distinct(sample_id3, .keep_all = TRUE)
  ) +
  facet_wrap(~ group) +
  xlab("Mud [%]") +
  ylab("\u03A39PFAS [\u03BCg/kg]")
```


```{r pfases}
pred_data %>%
  filter(pfas != "Σ9PFAS") %>%
  ggplot(aes(x, predicted)) +
  geom_smooth(color = muted("red")) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  geom_point(aes(x = mud, y = pfas_value),
    data = sim_data %>% filter(pfas != "Σ9PFAS") %>% distinct(sample_id3, .keep_all = TRUE)
  ) +
  facet_grid(pfas ~ group, scales = "free") +
  xlab("Mud [%]") +
  ylab("[\u03BCg/kg]")
```
## PCA

```{r}
library(factoextra)
library(FactoMineR)
# apply PCA
pca <- pfas_data_eq0_wide %>% select(mud:"Σ9PFAS") %>% select(-"Σ9PFAS", -"PFDoA", -"PFTriA") %>%  prcomp(center = TRUE, scale. = TRUE)

area_pcatag <- pfas_data_eq0_wide %>% select(area)



pca_area <- fviz_pca_biplot(pca,
                axes = c(1:2),
                repel = TRUE,
                fill.ind = area_pcatag$area,
                pointshape = 21,
                # col.ind = area_pcatag,
                  palette = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c"),
                pointsize = 4,
                addEllipses = FALSE,
                col.var = "black",
                title = "",
                mean.point = FALSE,
                # ellipse.type = "confidence",
                legend.title = "Area",
                labelsize = 4,
                label = "var",
                invisible = "none",
                ggtheme = survey_theme)#"ind")

pca_area

ggsave("pca-pfas-eq0.pdf")
```



## Effect of mud

```{r}
#| fig-cap: "Relative contribution of mud to the concentration of different PFASes. 1.01 corresponds to 1 % increase of PFAS concentration per % increase in mud."
#| label: fig-mud-contr
pfas_w_models %>%
  select(pfas, m_fit) %>%
  mutate(
    regression_table = map(m_fit, ~ model_parameters(.x, exponentiate = TRUE) %>% add_row(Parameter = "(Tweedie power)", Coefficient = glmmTMB:::.tweedie_power(.x)))
    # tweedie_power = map(m_fit, ~ glmmTMB:::.tweedie_power(.x))
  ) %>%
  unnest(regression_table) %>%
  mutate(
    Parameter = if_else(Component == "dispersion" & Parameter == "(Intercept)", "(Tweedie dispersion)", Parameter)
  ) %>%
  select(pfas, Parameter, Estimate = Coefficient, CI_low, CI_high, p) %>% 
  filter(Parameter == "mud") %>% 
  ggplot(aes(x = Estimate, y = pfas)) + geom_point() + geom_errorbarh(aes(xmin = CI_low, xmax = CI_high)) + geom_vline(xintercept = 1, linetype = "dashed", color = "tomato3") + labs(x = "Exponentiated coefficient of mud", y = "PFAS") +
  scale_x_continuous(breaks = c(1, 1.01, 1.02, 1.03, 1.04, 1.05))+
  scale_y_discrete(limits=rev)
```

## Area hypothesis


```{r}
areas_table <- pfas_w_models %>%
  select(pfas, area_model) %>%
  mutate(
    area_hypothesis = map(area_model, ~ model_parameters(.x, exponentiate = TRUE))
  ) %>%
  unnest(area_hypothesis) %>%
  select(-c(area_model, SE, CI, z, df_error))

areas_table %>%
  rename("exp(estimate)" = Coefficient) %>%
  gt(groupname_col = "pfas") %>%
  fmt_number(columns = 3:6, decimals = 2) %>% 
  tab_style(style = list( 
                         cell_text(weight = 'bold')), 
            locations = cells_column_labels(columns=everything())
  ) %>% 
  tab_style(
  style = cell_text(weight = "bold"),
  locations = cells_row_groups(groups = everything())
) %>% 
   tab_style(style = list( 
                         cell_text(weight = 'bold')), 
            locations = cells_body(columns=everything(), 
                                   rows = p <= 0.05)
  )

```
* For Σ9PFAS, no p-values are significant, indicating that no clear differences between areas are observed.
* However, for individual compounds some differences are observed:
  - For PFOS, there are differences between area V versus I, II and IV.
  - For PFUnA, there are differences between V versus I, II and IV.
* Overall, differences are driven by areas I and V. This is further shown by residual plots below.

Due to a low number of observations above LOQ as shown in @tbl-above-loq, it is likely not meaningful to compare differences between levels for other substances than Σ9PFAS, PFOS, PFOA and PFNA.


## Latitude hypothesis

```{r latitude-model}
#| fig-cap: "Residuals of the model for PFAS concentration vs mud plotted against latitude. The red line is the fitted loess curve. The residuals are not independent of latitude, indicating that the model does not capture all the variation in the data. We see that this is driven primarily by areas I and V."
#| label: fig-residuals-v-latitude
# residuals vs latitude without area categories
pfas_glm <- function(in_dat){
  glmmTMB(data = in_dat, formula = pfas_value ~  mud, family = tweedie(link = "log"))
}

area_wmodels <-
  pfas_data_eq0 %>%
  filter(!(pfas %in% c("PFHxA", "PFDoA", "PFTriA"))) %>%
  ## inspect effect of excluding ares with high PFAS concentrations and high mud content
  # filter(!(area %in% c("I", "V"))) %>%
  mutate(
    pfas = fct_relevel(pfas, c("Σ9PFAS", "PFOS", "PFOA", "PFNA", "PFUnA")),
    pfas_label = pfas
  ) %>%
  arrange(pfas) %>%
  group_by(pfas) %>%
  nest() %>%
  mutate(
    m_fit = map(data, pfas_glm),
    tidy = map(m_fit, ~ broom.mixed::tidy(.x, exponentiate = TRUE)),
    glance = map(m_fit, broom.mixed::glance),
    augment = map2(m_fit, data, ~ broom.mixed::augment(.x, .y)),
    pred = map(m_fit, ~ ggpredict(.x, terms = c("mud [1:100]"))),
    simulated = map(m_fit, ~ simulate(.x, nsim = 25, seed = 12345)),
    sim_data = map2(
      simulated, data, ~ bind_cols(.x, .y) %>%
        pivot_longer(cols = matches("sim"), names_to = "simgroup", values_to = "sim")
    ),
    reg_table = map(m_fit, ~ tbl_regression(.x, exponentiate = TRUE, tidy_fun = broom.mixed::tidy), estimate_fun = purrr::partial(style_ratio, digits = 3))
  )


area_wmodels %>%
  unnest(augment) %>%
  ggplot(aes(x = latitude, y = .resid)) +
  geom_point(aes(color = area)) +
  geom_smooth() +
  # set colour palette to: c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")
  scale_color_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")) +
  facet_wrap(~pfas, scale = "free")+
  xlab("Latitude")

#

```


```{r}
# area_wmodels %>%
#   unnest(augment) %>%
#   ggplot(aes(x = area, y = .resid)) +
#   geom_boxplot()+
#   geom_jitter()+
#   facet_wrap(~pfas, scale =)+
#   xlab("Area")
```


```{r latitude-hyp}
# latitude coefficient hypothesis
pfas_glm <- function(in_dat) {
  glmmTMB(data = in_dat, formula = pfas_value ~ mud + latitude, family = tweedie(link = "log"))
}

arealat_wmodels <-
  pfas_data_eq0 %>%
  filter(!(pfas %in% c("PFHxA", "PFDoA", "PFTriA"))) %>%
  ## inspect effect of excluding ares with high PFAS concentrations and high mud content
  # filter(!(area %in% c("I", "V"))) %>%
  mutate(
    pfas = fct_relevel(pfas, c("Σ9PFAS", "PFOS", "PFOA", "PFNA", "PFUnA", "PFDcA","PFHpA" )),
    pfas_label = pfas
  ) %>%
  arrange(pfas) %>%
  group_by(pfas) %>%
  nest() %>%
  mutate(
    m_fit = map(data, pfas_glm),
    tidy = map(m_fit, ~ broom.mixed::tidy(.x, exponentiate = TRUE)),
    glance = map(m_fit, broom.mixed::glance),
    augment = map2(m_fit, data, ~ broom.mixed::augment(.x, .y)),
    pred = map(m_fit, ~ ggpredict(.x, terms = c("mud [1:100]"))),
    simulated = map(m_fit, ~ simulate(.x, nsim = 25, seed = 12345)),
    sim_data = map2(
      simulated, data, ~ bind_cols(.x, .y) %>%
        pivot_longer(cols = matches("sim"), names_to = "simgroup", values_to = "sim")
    ),
    reg_table = map(m_fit, ~ tbl_regression(.x, exponentiate = TRUE, tidy_fun = broom.mixed::tidy), estimate_fun = purrr::partial(style_ratio, digits = 3))
  )

tbl_merge((arealat_wmodels %>% 
    filter(pfas %in% c("Σ9PFAS", "PFOS", "PFOA", "PFNA", "PFUnA", "PFDcA","PFHpA")))$reg_table, tab_spanner = c("Σ9PFAS", "PFOS", "PFOA", "PFNA", "PFUnA", "PFDcA","PFHpA")) %>% as_gt()

  
```

Applying the model with covariates 'C~{PFAS}~ = mud + latitude', yields the significance of covariates shown in table above. Latitude is not a significant covariate for Σ9PFAS. Some trends in the individual PFASes point toward lower concentrations at higher latitudes for PFOS, PFUnA, and PFDcA, whereas PFOA may increase going northward. However, as shown in @fig-residuals-v-latitude, areas I and V exert leverage on the data and local hotspots serve as hotspots driving much of the observed spatial variance. Thus, differences (and lack of thereof) may be driven largely by locations I and V. We also see that the variation is bigger for areas I and V, and correspondingly, for low and high latitudes. This makes inference on the background levels difficult.

# Supplementary

## Pair plot
```{r pairs}
#| column: page
#| out-width: 100%
ggpairs(pfas_data_eq0_wide %>% 
          select(
            area, mud, toc, Σ9PFAS, PFOS, PFOA, PFNA, PFUnA, PFDcA, PFHpA
          ),progress = FALSE)
```

## Regression table
```{r}
pfas_w_models %>%
  select(pfas, m_fit) %>%
  mutate(
    regression_table = map(m_fit, ~ model_parameters(.x, exponentiate = TRUE) %>% add_row(Parameter = "(Tweedie power)", Coefficient = glmmTMB:::.tweedie_power(.x)))
    # tweedie_power = map(m_fit, ~ glmmTMB:::.tweedie_power(.x))
  ) %>%
  unnest(regression_table) %>%
  mutate(
    Parameter = if_else(Component == "dispersion" & Parameter == "(Intercept)", "(Tweedie dispersion)", Parameter)
  ) %>%
  select(pfas, Parameter, Estimate = Coefficient, CI_low, CI_high, p) %>%
  gt() %>%
  fmt_number(columns = 4:6, decimals = 2) %>%
  fmt_number(columns = 3, decimals = 3) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels(columns = everything())
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_row_groups(groups = everything())
  ) %>%
  tab_header(title = "Regression table", subtitle = "Model coefficients exponentiated, whereas tweedie parameters are not.")
## other reg table implementation
# tbl_merge(pfas_w_models$reg_table, tab_spanner = c("Σ9PFAS", "PFOS", "PFOA", "PFNA", "PFUnA")) %>% as_gt()
```

## Observations above LOQ

```{r}
#| label: tbl-above-loq
#| tbl-cap: "Number of observations above LOQ for each PFAS out of 95 sampled locations.."
pfas_data_eq0 %>% 
  filter(pfas != "Σ9PFAS") %>% 
  group_by(pfas) %>%
  mutate(max_loq = max(loq, na.rm = TRUE)) %>% 
  summarise(
    n = sum(pfas_value > max_loq),
    n_samples = n_distinct(sample_id3)
  ) %>%
  mutate(
    p = n / n_samples
  ) %>% arrange(desc(p)) %>%
  select(-n_samples) %>%
  gt() %>%
  fmt_percent(columns = vars(p)) %>%
  # tab_header(
  #   title = md("Number of samples above LOQ"),
  #   subtitle = md("Number of samples above LOQ for each PFAS, and the proportion of samples above LOQ.")
  # ) %>%
  cols_label(
    pfas = md("**PFAS**"),
    n = md("**n > LOQ**"),
    p = md("**Proportion > LOQ**")
  )
```


## TOC vs mud
```{r toc-v-mud}

model_tocmid <-  
  glmmTMB(data = pfas_data_eq0_wide, formula = toc ~ mud + area, family = Gamma(link = "log"))

# model_tocmid %>% 
model_tocmid %>% parameters(exponentiate = TRUE) %>% select(Parameter, "exp(Estimate)" = Coefficient, p) %>% gt() %>% fmt_number(columns = "exp(Estimate)", decimals = 3) %>% fmt_scientific(columns = p,n_sigfig = 1) %>% 
    tab_header(title = "Regression table", subtitle = "Using a GLM with formula toc ~ mud + area with log link and Gamma distributed errors.")


ggplot(pfas_data_eq0_wide, aes(mud, toc)) +
  geom_point() +
  geom_smooth(method = "lm") +
  xlab("Mud [%]") +
  ylab("TOC")
```

# Other

## Tweedie distribution

```{r}
#| fig-cap: "Simulated Tweedie distributions for \u03BC = 1, 2 and 3, illustrating property to model censored data."
#| label: fig-tweedie-sim
#simulate 1000 tweedie using mu= 1 and mu = 3:
mutibble <- rbind(tibble(mu = c(rep(1, 10000))), tibble(mu = c(rep(2, 10000))), tibble(mu = c(rep(3, 10000)))) %>% 
  mutate(
  )

simtibble <- mutibble %>%
  mutate(
    sim = rTweedie(mu = mu, p = 1.404, 0.666),
    mu = str_replace(mu, "\\d", paste("\u03BC = ", mu))
  )

simtibble %>% ggplot(aes(x = sim)) +
  geom_histogram(binwidth = 0.05, color = "black") +
  facet_wrap(~mu)+
  geom_vline(aes(xintercept = str_extract(mu, "\\d") %>% as.numeric()), linetype = "dotted", color = "red")+
  xlab("Response value")+
  ylab("Frequence #")
```



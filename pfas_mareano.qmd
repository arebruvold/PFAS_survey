---
execute:
  warning: false
format:
  html:
    embed-resources: true
    code-fold: true
    toc: true
---
# Todo

* Fix names in paper vs figures.
* Could
    - Change CI on TOC vs Mud to Gamma, maybe others also.
  

# Data cleaning
```{r setup-cleaning}
# packages
library(tidyverse)
library(mgcv)
library(readxl)
library(ggmap)
library(janitor)
library(ggrepel)
library(GGally)
library(targets)
library(gt)
library(DataExplorer)
library(patchwork)
library(ggh4x)
library(ggthemes)
library(glmmTMB)
library(DHARMa)
library(performance)
library(MASS)
library(scales)
library(viridis)
library(gtsummary)
library(ggeffects)
library(multcomp)
library(broom)
library(broom.mixed)
library(parameters)
select <- dplyr::select
set.seed(12345)

# set theme
survey_theme <- theme_few()
theme_set(survey_theme)

source("pfas_scripts.R")


## for renaming pfas compounds with inconsequential naming
pfas_renamer <- function(pfas_in) {
  str_replace_all(
    pfas_in,
    c(
      "_a" = "_da",
      "pf_dc_da" = "PFDA",
      "pf_tri_da" = "PFTrDA",
      "pfos$" = "PFOS",
      "pfda" = "PFDA",
      "pfna" = "PFNA",
      "pf_hx_da" = "PFHxDA",
      "pf_hp_da" = "PFHpDA",
      "pfoa" = "PFOA",
      "pf_un_da" = "PFUnDA",
      "pf_do_da" = "PFDoDA",
      "pf_tr_da" = "PFTrDA",
      "s9_pfas" = "Σ9PFAS",
      "sum_9_pfas" = "Σ9PFAS"
    )
  )
}

## for renaming sample ids to fix inconsistencies
mareano_renamer <- function(ss_in) {
  
  sub_renamer <- function(ss_in){
  # check input
  stopifnot("requires single character string input." = length(ss_in) == 1 && is.character(ss_in))

  # for all strings remove spaces and replace BC with BX
  ss_out <- ss_in %>%
    str_replace_all("\\s", "") %>%
    str_replace_all("BC", "BX")
  # return if string do not contain MC or BX, as errors only with BX/MC
  if (str_detect(ss_out, "MC|BX", negate = TRUE)) {
    return(ss_out)}
  
  # part of name including BX/MC
  ss_prefix <- str_extract(ss_out, ".+[BXMC]+")
  # suffix-numbers with incoherent lengths
  ss_suffix <- str_extract(ss_out, "[0-9]+$")

  # change lengths
  if (str_length(ss_suffix) == 3) {
    return(ss_out)
  } else if (str_length(ss_suffix) == 2) {
    return(paste0(ss_prefix, "0", ss_suffix))
  } else if (str_length(ss_suffix) == 1) {
    return(paste0(ss_prefix, "00", ss_suffix))
  } else {
    # break with error message "suffix string not of length 1, 2 or 3":
    stop("suffix string not of length 1, 2 or 3")
  }
  }
  
  ss_out <-  map_chr(ss_in, sub_renamer)
  return(ss_out)
}

# to fix shifted column names
newnames <- (read_excel("data/Hele datasettet v2_corr.xlsx", skip = 178) %>% clean_names())[1, 16:29] %>% as_vector()

# appending correct column names
dataset <- read_excel("data/Hele datasettet v2_corr.xlsx", skip = 178) %>%
  clean_names() %>%
  rename_with(.cols = x16:x29, ~newnames) %>%
  clean_names() %>%
  slice(-1) %>%
  select(
    sample_id = sample,
    year = cruise_3,
    number = cruise_4,
    from_cm_o = sample_interval_top_bottom_5,
    to_cm_o = x6,
    longitude = dde,
    latitude = ddn,
    depth = mbsl,
    sample_id2 = x1096mc002,
    sample_id3 = sample_2,
    from_cm_i = sample_interval_top_bottom_12,
    to_cm_i = x13,
    clay_fraction,
    silt_fraction,
    Mud = mud_percent,
    TOC = toc_percent,
    pfos:pf_tri_a,
    s9_pfas = sum_9_pfas,
  ) %>%
  filter(
    !is.na(year)
  ) %>%
  mutate(across(!matches("sample"), as.numeric)) %>%
  # assign Areas:
  mutate(
    Area = case_when(
      row_number() %in% c(1:18) ~ "I",
      row_number() %in% c(19:45) ~ "II",
      row_number() %in% c(46:66) ~ "III",
      row_number() %in% c(67:89) ~ "IV",
      row_number() %in% c(90:95) ~ "V",
      TRUE ~ "Other"
    ),
    Area = as.factor(Area)
  ) %>%
  pivot_longer(
    cols = pfos:s9_pfas, names_to = "pfas", values_to = "pfas_value"
  ) %>%
  mutate(sample_id3 = mareano_renamer(sample_id3),
         pfas = pfas_renamer(pfas)) %>% 
  mutate(depth = case_when(
    sample_id3 == "R3165BX009" ~ 166,
    sample_id3 == "R3184BX013" ~ 277,
    sample_id3 == "R3105BX004" ~ 374,
    sample_id3 == "R3032BX001" ~ 419,
    sample_id3 == "R3004BX004" ~ 416,
    sample_id3 == "R2969BX003" ~ 855,
    sample_id3 == "R2924BX002" ~ 866,
    sample_id3 == "R1843BX038" ~ 277,
    TRUE ~ depth
),
depth = abs(depth) %>% round(digits = 0))

# import curated LOQs
loqs_raw <- read_excel("data/LOQs.xlsx") %>%
  clean_names() %>%
  select(-enhet) %>%
  rename(pfas = forbindelse)

loqs_years <- loqs_raw %>%
  filter(!(is.na(pfas))) %>%
  mutate(across(-pfas, ~ str_replace_all(.x, "\\<", "") %>% as.numeric()),
    pfas = make_clean_names(pfas)
  ) %>%
  rename_with(.cols = everything(), ~ str_replace(.x, "_2", "A") %>% str_replace("_3", "B")) %>%
  pivot_longer(cols = matches("\\d{4}"), names_to = "analysis_year", values_to = "loq")

loqs_samples <- loqs_raw %>%
  filter(is.na(pfas)) %>%
  rename_with(.cols = everything(), ~ str_replace(.x, "_2", "A") %>% str_replace("_3", "B")) %>%
  select(-pfas) %>%
  pivot_longer(
    cols = matches("\\d{4}"),
    names_to = "analysis_year",
    values_to = "sample_id"
  ) %>%
  drop_na() %>% 
  mutate(
    sample_id = mareano_renamer(sample_id),
    #correct sample_id error
    sample_id = if_else(sample_id == "R2924BX001", "R2924BX002", sample_id )
  )

loqs <- left_join(
  loqs_years, loqs_samples,
  by = c("analysis_year")
) %>% 
  mutate(loq = if_else(sample_id == "R3032BX001" & pfas == "pf_hp_a", 0.05, loq),
         pfas = pfas_renamer(pfas))

# merge data, assign values below LOQ
pfas_raw <- left_join(dataset, loqs, by = c("pfas", "sample_id3" = "sample_id")) %>%
  select(-analysis_year) %>%
  select(sample_id3, year, Area, longitude, latitude, Mud, TOC, pfas, pfas_value, loq, depth) %>%
  mutate(
    # to avoid floating point problems using ><=
    across(c("loq", "pfas_value"), ~ .x %>% round(digits = 6)),
    Area = as_factor(Area)
  )
  
pfas_data_eq0 <- pfas_raw %>%
  group_by(pfas) %>%
mutate(max_loq = max(loq %>% replace_na(0), na.rm = TRUE)) %>% 
  mutate(
    pfas_value = case_when(
      pfas_value < max_loq ~ 0,
      pfas_value %>% is.na ~ 0,
      TRUE ~ pfas_value
    )
  ) %>%
  ungroup() %>%
  group_by(sample_id3) %>%
  select(-max_loq) %>%
  mutate(pfas = factor(pfas, levels = c("PFHxDA", "PFHpDA", "PFOA", "PFNA", "PFDA", "PFUnDA", "PFDoDA", "PFTrDA", "PFOS", "Σ9PFAS"))) %>%
    mutate(
    pfas_value = if_else(
      pfas == "Σ9PFAS",
      sum(pfas_value[pfas != "Σ9PFAS"], na.rm = TRUE),
      pfas_value
    )
  )

pfas_data_eq0_wide <- pivot_wider(pfas_data_eq0 %>% select(-c(loq)), names_from = pfas, values_from = pfas_value) %>% ungroup()

## Using individual sample LOQs
pfas_data_0 <- pfas_raw %>%
  group_by(pfas) %>%
  mutate(max_loq = max(loq %>% replace_na(0), na.rm = TRUE)) %>% 
  mutate(
    pfas_value = case_when(
      pfas_value < loq ~ 0,
      pfas_value %>% is.na ~ 0,
      TRUE ~ pfas_value
    )
  ) %>%
  ungroup() %>%
  group_by(sample_id3) %>%
  mutate(pfas = factor(pfas, levels = c("PFHxDA", "PFHpDA", "PFOA", "PFNA", "PFDA", "PFUnDA", "PFDoDA", "PFTrDA", "PFOS", "Σ9PFAS"))) %>%
    mutate(
    pfas_value = if_else(
      pfas == "Σ9PFAS",
      sum(pfas_value[pfas != "Σ9PFAS"], na.rm = TRUE),
      pfas_value
    )
  ) %>% 
  mutate(
    pfas_value = if_else(pfas_value >= loq & pfas_value < max_loq, paste0(format(round(pfas_value, digits = 2), nsmall = 2), "*"), paste0(format(round(pfas_value, digits = 2), nsmall = 2)))
  )
  
pfas_data_0_wide <- pivot_wider(pfas_data_0 %>% select(-c(loq, max_loq)), names_from = pfas, values_from = pfas_value) %>% ungroup()

```

The LOQs varied between years; therefore, to avoid the potential of LOQ serving as a confounding variable, the highest value observed was uniformly applied. Values falling below the LOQ were assigned a zero, yielding conservative estimates of concentrations, and in comparison to assigning LOQ/2, resulting in a marginal rise in the coefficient estimates associated with mud.

# Modeling

## Fit

A generalized linear model with Poisson-gamma distributed errors and a logarithmic link function was employed to analyze the zero-inflated data censored by the limits of quantification. This model incorporated the predictors Area, TOC, and Mud and was implemented using the 'glmmTMB' package in R. Data exploration showed Mud to be collinear with TOC, and stepwise model selection based on Akaike's information criteria showed Mud to have higher predictive value than TOC. Thus, Area and Mud were retained for the regression analysis. To test for differences between the Areas, pairwise comparisons were performed using the 'multcomp' package with single-step p-value adjustment. Simulation-based model validation was carried out using the 'DHARMa' and 'ggeffects' packages. The code to reproduce the statistical analysis is provided in an online repository.



```{r model-fits}
pfas_glm <- function(in_dat){
  glmmTMB(data = in_dat, formula = pfas_value ~ Area + Mud, family = tweedie(link = "log"))
}

pfas_w_models <-
  pfas_data_eq0 %>%
  filter((pfas %in% c("PFOS", "PFOA", "PFNA", "PFUnDA", "Σ9PFAS"))) %>%
  ## inspect effect of excluding ares with high PFAS concentrations and high Mud content
  # filter(!(Area %in% c("I", "V"))) %>%
  mutate(
    pfas = fct_relevel(pfas, c("Σ9PFAS", "PFOS", "PFOA", "PFNA", "PFUnDA")),
    pfas_label = pfas
  ) %>%
  arrange(pfas) %>%
  group_by(pfas) %>%
  nest() %>%
  mutate(
    m_fit = map(data, pfas_glm),
    tidy = map(m_fit, ~ broom.mixed::tidy(.x, exponentiate = TRUE)),
    glance = map(m_fit, broom.mixed::glance),
    augment = map2(m_fit, data, ~ broom.mixed::augment(.x, .y)),
    pred = map(m_fit, ~ ggpredict(.x, terms = c("Mud [1:100]", "Area"))),
    simulated = map(m_fit, ~ simulate(.x, nsim = 25, seed = 12345)),
    sim_data = map2(
      simulated, data, ~ bind_cols(.x, .y) %>%
        pivot_longer(cols = matches("sim"), names_to = "simgroup", values_to = "sim") %>%
        rename(group = Area)
    ),
    Area_model = map2(m_fit, pfas, ~ glht(.x, linfct = mcp(Area = "Tukey"))),
    # # validate the parameters:: implementation
    # Area_hypothesis = map2(m_fit, pfas, ~ glht(.x, linfct = mcp(Area = "Tukey")) %>%
    #   summary(test = adjusted(type = "single-step")) %>%
    #   tidy() %>%
    #   select(-c(term, null.value)) %>%
    #   mutate(estimate = exp(estimate))),
    reg_table = map(m_fit, ~ tbl_regression(.x, exponentiate = TRUE, tidy_fun = broom.mixed::tidy), estimate_fun = purrr::partial(style_ratio, digits = 3))
  )
```


## Model validation {#sec-model-validation}

<details>

<summary>Details and model validation</summary>

```{r model-sim}
sim_data <- pfas_w_models %>% 
  unnest(sim_data)

pred_data <- pfas_w_models %>% unnest(pred)

pred_data %>% ggplot(aes(x, predicted)) +
  geom_smooth(color = "#AF2D2D") +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  geom_point(data = sim_data, aes(x = Mud, y = sim), alpha = 0.1, size = 0.2, color = muted("red", l = 50, c = 70))+
  geom_point(aes(x = Mud, y = pfas_value),
             data = sim_data %>% distinct(sample_id3, .keep_all = TRUE)) +
  facet_grid(pfas~group, scales = "free")+
  xlab("Mud [%]")+
  ylab("PFAS [\u03BCg/kg]")
```
Shown are the model fits on the original scale, with observations shown by black dots. Small red dots shows 25 simulations from the model for each combination of observed covariate values.

```{r dharma-validation}
#| layout-ncol: 2
#| fig-format: png

# dharma_printer <- function(mod, in_dat) {
#   sim_resid <- simulateResiduals(fittedModel = mod, n = 1000)
#   pfas_name <- in_dat$pfas_label[1]
#   ## for naming plots
#   #   plot.new()
#   # mtext(paste(pfas_name), cex = 4)
#   testZeroInflation(sim_resid)
#   mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)
# 
#   plotQQunif(sim_resid)
#   mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)
# 
#   plotResiduals(sim_resid)
#   mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+"), " (T-P=", glmmTMB:::.tweedie_power(mod) %>% round(digits = 3), ", d=", sigma(mod) %>% round(digits = 3), ")"), side = 4, col = 2, cex = 1.5)
# 
#   plotResiduals(mod, form = in_dat$Area)
#   mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)
# 
#   plotResiduals(mod, form = in_dat$TOC)
#   mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)
# 
#   plotResiduals(sim_resid, form = in_dat$year)
#   mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)
# 
#   plotResiduals(sim_resid, form = in_dat$latitude)
#   mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)
# 
#   plotResiduals(sim_resid, form = in_dat$longitude)
#   mtext(paste0(pfas_name, "~", str_flatten(mod$frame %>% select(-1) %>% colnames(), collapse = "+")), side = 4, col = 2, cex = 1.5)
# }
# 
# map2(pfas_w_models$m_fit, pfas_w_models$data, ~ dharma_printer(.x, .y))
```

Plots above show scaled quantile residuals using the DHARMa package. These are obtained by simulating from the fitted model and comparing to the observed residuals. The DHaRMa residuals are expected to be uniformly distributed around 0, red lines parallel and near the dotted grey lines. The quantile-quantile plot are expected to follow the 45-degree line. Plots are grouped by PFAS and Area.

Comments:

</details>

# Results

## Overview and summary
```{r map}
#| column: page
#| out-width: 100%

map_Area_conc <-
  ggmap(tar_read(stadia_map)) +
  geom_point(aes(x = longitude, y = latitude, color = Σ9PFAS, fill = Σ9PFAS, shape = Area), data = pfas_data_eq0_wide, position = position_dodge(width = 10), size = 2, alpha = 0.7) +
  labs(x = "Longitude [°E]", y = "Latitude [°N]") +
  scale_color_viridis(option = "magma") +
  scale_fill_viridis(option = "magma") +
  scale_shape_manual(values = c(21, 22, 23, 24, 25)) +
  #change legend label to Area and \u03A39PFAS:
  labs(color = "\u03A39PFAS", shape = "Area")+
  guides(fill = FALSE)

map_Area_conc

## year
  # ggmap(tar_read(stadia_map)) +
  # geom_point(aes(x = longitude, y = latitude, color = year, fill = year, shape = Area), data = pfas_data_eq0_wide, position = position_dodge(width = 10), size = 2, alpha = 0.7) +
  # labs(x = "Longitude [°E]", y = "Latitude [°N]") +
  # scale_color_viridis(option = "magma") +
  # scale_fill_viridis(option = "magma") +
  # scale_shape_manual(values = c(21, 22, 23, 24, 25)) +
  # #change legend label to Area and \u03A39PFAS:
  # labs(color = "Year", shape = "Area")+
  # guides(fill = FALSE)

## depth
  # ggmap(tar_read(stadia_map)) +
  # geom_point(aes(x = longitude, y = latitude, color = depth, fill = depth, shape = Area), data = pfas_data_eq0_wide %>% filter(depth < 200), position = position_dodge(width = 10), size = 2, alpha = 0.7) +
  # labs(x = "Longitude [°E]", y = "Latitude [°N]") +
  # scale_color_viridis(option = "magma") +
  # scale_fill_viridis(option = "magma") +
  # scale_shape_manual(values = c(21, 22, 23, 24, 25)) +
  # #change legend label to Area and \u03A39PFAS:
  # labs(color = "Depth [m]", shape = "Area")+
  # guides(fill = FALSE)
```

```{r}
pfas_data_eq0_wide %>%
  group_by(Area) %>%
  # mean, sd for each Area for each of Σ9PFAS, TOC, Mud:
  summarise(
    across(Mud:Σ9PFAS, mean, na.rm = TRUE),
    n = n()
  ) %>%
  gt() %>%
  fmt_number(columns = 2:13, decimals = 1) %>%
  tab_spanner(label = "Mean", columns = 2:13) %>%
  tab_header(title = "Summary of covariates by Area, <LOQ = 0") %>%
  cols_label(
    Area = md("**Area**"),
    n = md("**n**"),
    Σ9PFAS = md("**\u03A39PFAS**"),
    PFHxDA = md("**PFHxDA**"),
    PFHpDA = md("**PFHpdA**"),
    PFDA = md("**PFDA**"),
    PFOS = md("**PFOS**"),
    PFOA = md("**PFOA**"),
    PFNA = md("**PFNA**"),
    PFTrDA = md("**PFTrDA**"),
    PFDoDA = md("**PFDoDA**"),
    PFUnDA = md("**PFUnDA**"),
    TOC = md("**TOC**"),
    Mud = md("**Mud**")
  )

```

```{r}

pfas_ratios <- pfas_data_eq0_wide %>%
  mutate(
    "PFOA_to_PFNA" = if_else(PFOA == 0 | PFNA == 0, NA, PFOA / PFNA),
    "PFDA_to_PFUnDA" = if_else(PFDA == 0 | PFUnDA == 0, NA, PFDA / PFUnDA)
  ) %>%
  select("PFOA_to_PFNA", "PFDA_to_PFUnDA", PFOA, PFNA, PFDA, PFUnDA, sample_id3:TOC) %>%
  pivot_longer(
    cols = c("PFOA_to_PFNA", "PFDA_to_PFUnDA"),
    names_to = "pfas",
    values_to = "Ratio"
  ) %>% mutate(c1 = if_else(pfas == "PFOA_to_PFNA", PFOA, PFDA),
               c2 = if_else(pfas == "PFOA_to_PFNA", PFNA, PFUnDA)
  ) %>% 
  mutate(pfas = case_when(
      pfas == "PFOA_to_PFNA" ~ "PFOA : PFNA",
      pfas == "PFDA_to_PFUnDA" ~ "PFDA : PFUnDA"
    )
  )
  
  pfas_ratios %>% 
  ggplot(aes(Area, Ratio)) +
  geom_jitter(aes(fill = Area), width = 0.2, size = 3, colour = "black", shape = 21) +
  # mean for each Area using stat summary:
  stat_summary(aes(group = 1),
    fun = mean, geom = "line",
    linetype = "dotted",
    size = 0.5, fill = "black"
  ) +
    scale_fill_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c"))+
  #   scale_color_viridis(option = "magma") +
  # scale_fill_viridis(option = "magma")+
  stat_summary(geom = "errorbar", fun.data = mean_cl_normal, fun.args = list(conf.int = 0.95), size = 0.7, width = 0.5) +
  xlab("Area") +
  guides(fill = FALSE) +
  facet_wrap(~pfas, scales = "free")
  
  pfas_ratios %>% group_by(Area, pfas) %>% summarise( mean =  mean(Ratio, na.rm = T)) %>% 
    mutate(pfas = case_when(
      pfas == "PFOA_to_PFNA" ~ "PFOA : PFNA",
      pfas == "PFDA_to_PFUnDA" ~ "PFDA : PFUnDA"
    )) %>% 
    pivot_wider(
      names_from = Area,
      values_from = mean) %>% 
    gt() %>% 
    fmt_number(2:6, decimals = 1)
  
```

### Outlier check

```{r}

outlier_cand <- pfas_data_eq0_wide %>%
    mutate(
        PFOA_to_PFNA = if_else(PFOA == 0 | PFNA == 0, NA, PFOA / PFNA),
        PFDA_to_PFUnDA = if_else(PFDA == 0 | PFUnDA == 0, NA, PFDA / PFUnDA)
    ) %>%
  filter(PFOA_to_PFNA > 3 | PFDA_to_PFUnDA < 0.3)

outlier_cand %>% gt() %>% fmt_number(columns = longitude:PFDA_to_PFUnDA)


library(leaflet)
library(leafem)


leaflet(outlier_cand) %>%
  addTiles() %>%
  addCircleMarkers(lng = ~longitude,
                   lat = ~latitude,
                   radius = 2,
                   popup = ~ paste(
                     "PFDA_to_PFUnDA :",
                     PFDA_to_PFUnDA,
                     "<br>",
                     "PFOA_to_PFNA :",
                     PFOA_to_PFNA,
                     "<br>",
                     "sample_id :",
                     sample_id3)) %>% 
  addLabelOnlyMarkers(
   lng = ~longitude,
                   lat = ~latitude,
                   label = ~ paste(
                     "PFDA_to_PFUnDA :",
                     PFDA_to_PFUnDA %>% round(digits = 1),
                     "//",
                     "PFOA_to_PFNA :",
                     PFOA_to_PFNA %>% round(digits = 1),
                     "//",
                     "sample_id :",
                     sample_id3),
    # labelOptions = labelOptions(noHide = T))
    labelOptions = labelOptions(noHide = T, direction = 'top', textOnly = T)
  )


```


```{r}
#| fig-width: 4
#| fig-height: 5
pfas_prop <- pfas_data_eq0 %>%
  # for each Area, calculate the proportion of each pfas:
  group_by(Area, pfas) %>%
  summarise(
    pfas_sum = sum(pfas_value, na.rm = TRUE),
  ) %>%
  group_by(Area) %>%
  mutate(
    pfas_prop = pfas_sum / sum(pfas_sum[pfas != "Σ9PFAS"], na.rm = TRUE)
  ) %>%
  filter(pfas != "Σ9PFAS")

ggplot(pfas_prop, aes(fill = pfas, y = pfas_prop, x = Area)) +
  geom_bar(position = "stack", stat = "identity", width = 0.88, color = "black") +
  scale_fill_brewer(palette = "Set3") +
  xlab("Area") +
  ylab("Propotion") +
  # legend title PFAS:
  labs(fill = "")
```

## PFAS vs Mud by Area

```{r sum9}
pred_data %>%
  filter(pfas == "Σ9PFAS") %>%
  ggplot(aes(x, predicted)) +
  geom_point(aes(x = Mud, y = pfas_value, fill = group), color = "black", shape = 21,
    data = sim_data %>% filter(pfas == "Σ9PFAS") %>% distinct(sample_id3, .keep_all = TRUE)
  ) + 
geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
    geom_smooth(color = "#AF2D2D") +
  scale_fill_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c"))+
  facet_wrap(~ group) +
  guides(color = FALSE, size = FALSE, fill = FALSE)+
  xlab("Mud [%]") +
  ylab("\u03A39PFAS [\u03BCg/kg]")
```


```{r pfases}
pred_data %>%
  filter(pfas != "Σ9PFAS") %>%
  ggplot(aes(x, predicted)) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  geom_point(aes(x = Mud, y = pfas_value, fill = group), color = "black", shape = 21,
    data = sim_data %>% filter(pfas != "Σ9PFAS") %>% distinct(sample_id3, .keep_all = TRUE)
  ) +
  geom_smooth(color = "#AF2D2D") +
    scale_fill_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c"))+
  facet_grid(pfas ~ group, scales = "free") +
  guides(fill = FALSE)+
  xlab("Mud [%]") +
  ylab("[\u03BCg/kg]")
```
## PCA

```{r}
library(factoextra)
library(FactoMineR)
# apply PCA
pca <- pfas_data_eq0_wide %>% select(Mud:"Σ9PFAS") %>%
  select(-"Σ9PFAS", 
         -"PFDoDA",
         -"PFTrDA",
         -depth
         ) %>%
  prcomp(center = TRUE, scale. = TRUE)

Area_pcatag <- pfas_data_eq0_wide %>% select(Area)



pca_Area <- fviz_pca_biplot(pca,
                axes = c(1,2),
                repel = TRUE,
                fill.ind = Area_pcatag$Area,
                pointshape = 21,
                # col.ind = Area_pcatag,
                  palette = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c"),
                pointsize = 4,
                addEllipses = FALSE,
                col.var = "black",
                title = "",
                mean.point = FALSE,
                # ellipse.type = "confidence",
                legend.title = "Area",
                labelsize = 4,
                label = "var",
                invisible = "none",
                ggtheme = survey_theme)#"ind")

pca_Area

ggsave("pca-pfas-eq0.pdf")
```



## Effect of Mud

```{r}
#| fig-cap: "Relative contribution of Mud to the concentration of different PFASes. 1.01 corresponds to 1 % increase of PFAS concentration per % increase in Mud."
#| label: fig-Mud-contr
pfas_w_models %>%
  select(pfas, m_fit) %>%
  mutate(
    regression_table = map(m_fit, ~ model_parameters(.x, exponentiate = TRUE) %>% add_row(Parameter = "(Tweedie power)", Coefficient = glmmTMB:::.tweedie_power(.x)))
    # tweedie_power = map(m_fit, ~ glmmTMB:::.tweedie_power(.x))
  ) %>%
  unnest(regression_table) %>%
  mutate(
    Parameter = if_else(Component == "dispersion" & Parameter == "(Intercept)", "(Tweedie dispersion)", Parameter)
  ) %>%
  select(pfas, Parameter, Estimate = Coefficient, CI_low, CI_high, p) %>% 
  filter(Parameter == "Mud") %>% 
  ggplot(aes(x = Estimate, y = pfas)) + geom_point() + geom_errorbarh(aes(xmin = CI_low, xmax = CI_high)) + geom_vline(xintercept = 1, linetype = "dashed", color = "#AF2D2D") + labs(x = "Exponentiated coefficient of Mud", y = "PFAS") +
  scale_x_continuous(breaks = c(1, 1.01, 1.02, 1.03, 1.04, 1.05))+
  scale_y_discrete(limits=rev)
```

## Area hypothesis


```{r}
Areas_table <- pfas_w_models %>%
  select(pfas, Area_model) %>%
  mutate(
    Area_hypothesis = map(Area_model, ~ model_parameters(.x, exponentiate = TRUE))
  ) %>%
  unnest(Area_hypothesis) %>%
  select(-c(Area_model, SE, CI, z, df_error))

Areas_table %>%
  rename("exp(estimate)" = Coefficient) %>%
  gt(groupname_col = "pfas") %>%
  fmt_number(columns = 3:6, decimals = 2) %>% 
  tab_style(style = list( 
                         cell_text(weight = 'bold')), 
            locations = cells_column_labels(columns=everything())
  ) %>% 
  tab_style(
  style = cell_text(weight = "bold"),
  locations = cells_row_groups(groups = everything())
) %>% 
   tab_style(style = list( 
                         cell_text(weight = 'bold')), 
            locations = cells_body(columns=everything(), 
                                   rows = p <= 0.05)
  )

```
* For Σ9PFAS, no p-values are significant, indicating that no clear differences between Areas are observed.
* However, for individual compounds some differences are observed:
  - For PFOS, there are differences between Area V versus I, II and IV.
  - For PFUnDA, there are differences between V versus I, II and IV.
* Overall, differences are driven by Areas I and V. This is further shown by residual plots below.

```{r}
model_preds <-
  map2(pfas_w_models$m_fit, pfas_w_models$pfas, ~ {
    mud_percent <- 71
    predict_response(.x, terms = "Area", condition = c("Mud" = mud_percent)) %>% plot() + ylab("Predicted") + theme_bw(base_size = 12) + labs(title = NULL, subtitle = paste(.y, " | Mud% = ", mud_percent))
    # ggsave(paste0(.y, "_", mud_percent, ".pdf"))
  })
wrap_plots(model_preds)

```

## Latitude hypothesis

```{r latitude-hyp-modeling}
#| fig-cap: "Residuals of the model for PFAS concentration vs Mud plotted against latitude. The red line is the fitted loess curve. The residuals are not independent of latitude, indicating that the model does not capture all the variation in the data. We see that this is driven primarily by Areas I and V."
#| label: fig-residuals-v-latitude
# residuals vs latitude without Area categories
pfas_glm <- function(in_dat){
  glmmTMB(data = in_dat, formula = pfas_value ~  Mud, family = tweedie(link = "log"))
}

Area_wmodels <-
  pfas_data_eq0 %>%
  filter(!(pfas %in% c("PFHxDA", "PFDoDA", "PFTrDA"))) %>%
  ## inspect effect of excluding ares with high PFAS concentrations and high Mud content
  # filter(!(Area %in% c("I", "V"))) %>%
  mutate(
    # pfas = fct_relevel(pfas, c("Σ9PFAS", "PFOS", "PFOA", "PFNA", "PFUnDA")),
    pfas_label = pfas
  ) %>%
  arrange(pfas) %>%
  group_by(pfas) %>%
  nest() %>%
  mutate(
    m_fit = map(data, pfas_glm),
    tidy = map(m_fit, ~ broom.mixed::tidy(.x, exponentiate = TRUE)),
    glance = map(m_fit, broom.mixed::glance),
    augment = map2(m_fit, data, ~ broom.mixed::augment(.x, .y)),
    pred = map(m_fit, ~ ggpredict(.x, terms = c("Mud [1:100]"), back_transform = TRUE)),
    simulated = map(m_fit, ~ simulate(.x, nsim = 25, seed = 12345)),
    sim_data = map2(
      simulated, data, ~ bind_cols(.x, .y) %>%
        pivot_longer(cols = matches("sim"), names_to = "simgroup", values_to = "sim")
    ),
    reg_table = map(m_fit, ~ tbl_regression(.x, exponentiate = TRUE, tidy_fun = broom.mixed::tidy), estimate_fun = purrr::partial(style_ratio, digits = 3))
  )


Area_wmodels %>%
  unnest(augment) %>%
  ggplot(aes(x = latitude, y = .resid)) +
  geom_point(aes(fill = Area), shape = 21, color = "black") +
  geom_smooth(color = "#AF2D2D") +
  scale_fill_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")) +
  facet_wrap(~pfas, scale = "free")+
  scale_x_reverse() +
  ylab("Residuals")+
  xlab("Latitude")

# test colours:
# testcol <- expand_grid(my_l = seq(0,100, 10), my_c= seq(0,100, 10)) %>% 
#   # mutate(color = muted("red", l = my_l, c = my_c))
#   mutate(hei = map2(my_l, my_c, ~muted("blue", .x, .y))
#   )
# show_col(testcol$hei %>% as_vector())
```


```{r}
# Area_wmodels %>%
#   unnest(augment) %>%
#   ggplot(aes(x = Area, y = .resid)) +
#   geom_boxplot()+
#   geom_jitter()+
#   facet_wrap(~pfas, scale =)+
#   xlab("Area")
```


```{r latitude-hyp-coeff}
# latitude coefficient hypothesis
tbl_merge(
  (Area_wmodels %>% 
    filter(pfas %in% c("Σ9PFAS", "PFOS", "PFOA", "PFNA", "PFUnDA", "PFDA","PFHpDA")))$reg_table,
    tab_spanner =  Area_wmodels %>% pull(pfas) %>% as.character()
    ) %>% as_gt()

```

Applying the model with covariates 'C~{PFAS}~ = Mud + latitude', yields the significance of covariates shown in table above. Latitude is not a significant covariate for Σ9PFAS. Some trends in the individual PFASes point toward lower concentrations at higher latitudes for PFOS, PFUnA, and PFDcA, whereas PFOA may increase going northward. However, as shown in @fig-residuals-v-latitude, Areas I and V exert leverage on the data and local hotspots serve as hotspots driving much of the observed spatial variance. Thus, differences (and lack of thereof) may be driven largely by locations I and V. We also see that the variation is bigger for Areas I and V, and correspondingly, for low and high latitudes. This makes inference on the background levels difficult.

## Depth and time hypothesis

```{r depth-hyp}
#| fig-cap: "Residuals of the model for PFAS concentration vs Mud plotted against depth. The red line is the fitted loess curve."
#| label: fig-residuals-v-depth
# residuals vs depth with Area categories

# pfas_w_models %>%
#   unnest(augment) %>% 
#   ggplot(aes(x = depth, y = .resid)) +
#   geom_point(aes(fill = Area), shape = 21, color = "black") +
#   geom_smooth(color = "#AF2D2D") +
#   scale_fill_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")) +
#   facet_wrap(~pfas, scale = "free")+
#   ylab("Residuals")+
#   xlab("Depth [m]")


pfas_data_eq0 %>%
  # unnest(augment) %>% 
  ggplot(aes(depth, pfas_value))+
  geom_point(aes(fill = Area), shape = 21, color = "black") +
  facet_wrap(~pfas, scale = "free")+
   scale_fill_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c"))+
  ylab("Concentration [µg/kg dry weight]")+
  xlab("Depth [m]")
ggsave("depth_vs_conc.png", width = 7, height = 4.5)


Area_wmodels %>%
  filter(pfas == "PFOA") %>% 
  unnest(augment) %>%
  ggplot(aes(Area, depth))+
  geom_jitter(aes(fill = Area), shape = 21, color = "black", width = 0.15) +
  geom_boxplot(alpha = 0.5, outliers = FALSE)+
  # facet_wrap(~pfas, scale = "free")+
   scale_fill_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c"))+
  ylab("Depth [m]")+
  xlab("Area")+
  theme(legend.position = "none")
ggsave("depth_vs_area.png", width = 7, height = 4.5)


```

```{r year-hypothesis}

Area_wmodels %>%
  unnest(augment) %>% 
  ggplot(aes(year, pfas_value))+
  geom_point(aes(fill = Area), shape = 21, color = "black") +
  facet_wrap(~pfas, scale = "free")+
   scale_fill_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c"))+
  ylab("Concentration [µg/kg dry weight]")+
  xlab("Year")


Area_wmodels %>%
  unnest(augment) %>% 
  filter(pfas == "Σ9PFAS") %>% 
  ggplot(aes(Area, year))+
  geom_jitter(aes(fill = Area), shape = 21, color = "black", width = 0.15) +
  geom_boxplot(alpha = 0.5, outliers = FALSE)+   scale_fill_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c"))+
  ylab("Year")+
  xlab("Area")+
  theme(legend.position = "none")

```

# Supplementary

## Pair plot
```{r pairs}
#| column: page
#| out-width: 100%
ggpairs(pfas_data_eq0_wide %>% 
          select(
Area, Mud, TOC, depth, Σ9PFAS, PFOS, PFOA, PFNA, PFUnDA, PFDA, PFHpDA
          ),
        progress = FALSE)

```

## Regression table
```{r}
pfas_w_models %>%
  select(pfas, m_fit) %>%
  mutate(
    regression_table = map(m_fit, ~ model_parameters(.x, exponentiate = TRUE) %>% add_row(Parameter = "(Tweedie power)", Coefficient = glmmTMB:::.tweedie_power(.x)))
    # tweedie_power = map(m_fit, ~ glmmTMB:::.tweedie_power(.x))
  ) %>%
  unnest(regression_table) %>%
  mutate(
    Parameter = if_else(Component == "dispersion" & Parameter == "(Intercept)", "(Tweedie dispersion)", Parameter)
  ) %>%
  select(pfas, Parameter, Estimate = Coefficient, CI_low, CI_high, p) %>%
  gt() %>%
  fmt_number(columns = 4:6, decimals = 2) %>%
  fmt_number(columns = 3, decimals = 3) %>%
  tab_style(
    style = list(
      cell_text(weight = "bold")
    ),
    locations = cells_column_labels(columns = everything())
  ) %>%
  tab_style(
    style = cell_text(weight = "bold"),
    locations = cells_row_groups(groups = everything())
  ) %>%
  tab_header(title = "Regression table", subtitle = "Model coefficients exponentiated, whereas tweedie parameters are not.")

## other reg table implementation
tbl_merge(
  (pfas_w_models)$reg_table,
    tab_spanner =  pfas_w_models %>% pull(pfas) %>% as.character()
    ) %>% as_gt()
```

## Observations above LOQ

```{r}
#| label: tbl-above-loq
#| tbl-cap: "Number of observations above LOQ for each PFAS out of 95 sampled locations.."
pfas_data_eq0 %>%
  filter(pfas != "Σ9PFAS") %>%
  group_by(pfas) %>%
  mutate(max_loq = max(loq, na.rm = TRUE)) %>% #distinct(pfas, max_loq) %>%  View()
  summarise(
    n = sum(pfas_value > max_loq),
    n_samples = n_distinct(sample_id3)
  ) %>%
  mutate(
    p = n / n_samples
  ) %>% arrange(desc(p)) %>%
  select(-n_samples) %>%
  gt() %>%
  fmt_percent(columns = vars(p), decimals = 0) %>%
  # tab_header(
  #   title = md("Number of samples above LOQ"),
  #   subtitle = md("Number of samples above LOQ for each PFAS, and the proportion of samples above LOQ.")
  # ) %>%
  cols_label(
    pfas = md("**PFAS**"),
    n = md("**n > LOQ**"),
    p = md("**Proportion > LOQ**")
  )
```

```{r between-maxloq-loq}
#| label: tbl-between-loq
#| tbl-cap: "Samples and fraction above the different LOQs for each PFAS."
between_maxloqloq <- pfas_raw %>%
  group_by(pfas) %>%
  mutate(max_loq = max(loq, na.rm = TRUE)) %>%
  ungroup() %>%
  group_by(sample_id3) %>%
  mutate(
    pfas_value = if_else(
      pfas == "Σ9PFAS",
      sum(pfas_value[pfas != "Σ9PFAS"], na.rm = TRUE),
      pfas_value
    )
  ) %>%
  mutate(
    pfas = pfas_renamer(pfas)
  ) %>%
  mutate(pfas = factor(pfas, levels = c("PFHxDA","PFHpDA", "PFOA", "PFNA", "PFDA", "PFUnDA", "PFDoDA", "PFTrDA", "PFOS", "Σ9PFAS"))) %>% group_by(pfas) %>% 
mutate(
    n_above_loq =  sum(pfas_value >= loq, na.rm = FALSE),
    n_between_loqs = sum(pfas_value >= loq & pfas_value < max_loq, na.rm = FALSE),
    n_above_max_loq = sum(pfas_value >= max_loq, na.rm = FALSE),
    frac_between = 100*(n_between_loqs/(n_above_max_loq+n_between_loqs)),
    min_loq = min(loq, na.rm = FALSE),
    max_loq = max(loq, na.rm = FALSE),
  ) %>% 
  mutate(Area = factor(Area, levels = c("I","II", "III", "IV", "V")))

between_maxloqloq %>% distinct(pfas, .keep_all = TRUE) %>%
  select(
    pfas, n_above_loq, n_between_loqs, n_above_max_loq, frac_between, min_loq, max_loq) %>% ungroup() %>% 
gt() %>% 
  # color n_between_loqs by frac_between:
  data_color(
    columns = frac_between,
    fn = scales::col_numeric(
      palette = "BuPu",
      domain = c(0, 50)
    )
  ) %>% 
  fmt_number(columns = frac_between,
             decimals = 0) %>% 
  cols_label(
    pfas = "PFAS",
    n_above_loq = "> LOQ",
    n_between_loqs = "> LOQ & < maxLOQ",
    n_above_max_loq = "> maxLOQ",
    frac_between = "% between",
    min_loq = "min LOQ",
    max_loq = "max LOQ"
  ) %>% gtsave("tableDL.html")
```

```{r loq-plot}
#| label: loq-plot
#| tbl-cap: "Overview of PFAS concentrations vs LOQ, with LOQ and maxLOQ indicated in red."

between_maxloqloq %>% 
  filter(str_detect(pfas, "9PFAS", negate = TRUE)) %>%
  ggplot(aes(Area, pfas_value, color = frac_between))+
  geom_jitter(data = . %>% filter(
    pfas_value > loq & pfas_value < max_loq
  ), width = 0.2)+
  geom_jitter(data = . %>% filter(
    pfas_value > max_loq | pfas_value < loq
  ), width = 0.2, color = "black", alpha = 0.5)+
  geom_point(aes(Area, loq), size = 5, color = "red", shape = "_")+
  geom_hline(aes(yintercept = max_loq), color = "red", linetype = "dotted") + 
  facet_wrap(~pfas, scales = "free")+
  scale_color_gradient(low = "white", high = "purple", limits = c(0, 50))+
    scale_x_discrete(limits = c("I", "II", "III", "IV", "V"))

```
```{r loq-vs-area}
between_maxloqloq %>% 
  filter(str_detect(pfas, "9PFAS", negate = TRUE)) %>%
  ggplot(aes(latitude, loq, color = Area))+geom_point()+
  scale_color_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")) +
  facet_wrap(~pfas)
```


## TOC vs Mud
```{r TOC-v-Mud}

model_TOCmid <-  
  glmmTMB(data = pfas_data_eq0_wide, formula = TOC ~ Mud + Area, family = Gamma(link = "log"))

# model_TOCmid %>% 
model_TOCmid %>% parameters(exponentiate = TRUE) %>% select(Parameter, "exp(Estimate)" = Coefficient, p) %>% gt() %>% fmt_number(columns = "exp(Estimate)", decimals = 3) %>% fmt_scientific(columns = p,n_sigfig = 1) %>% 
    tab_header(title = "Regression table", subtitle = "Using a GLM with formula TOC ~ Mud + Area with log link and Gamma distributed errors.")


ggplot(pfas_data_eq0_wide, aes(Mud, TOC)) +
  geom_point(aes(color = Area)) +
  geom_smooth(method = "lm", color = "#AF2D2D") +
  scale_color_manual(values = c("#2c7bb6", "#abd9e9", "#ffffbf", "#fdae61", "#d7191c")) +
  xlab("Mud [%]") +
  ylab("TOC")
```

## PFAS vs TOC


```{r model-fits-toc}

pfas_glm_toc <- function(in_dat){
  glmmTMB(data = in_dat, formula = pfas_value ~ Area + TOC, family = tweedie(link = "log"))
}

pfas_w_models_toc <- pfas_data_eq0 %>%
  filter(!(pfas %in% c("PFHxDA", "PFDoDA", "PFTrDA"))) %>%
  ## inspect effect of excluding ares with high PFAS concentrations and high Mud content
  # filter(!(Area %in% c("I", "V"))) %>%
  mutate(
    # pfas = fct_relevel(pfas, c("Σ9PFAS", "PFOS", "PFOA", "PFNA", "PFUnDA")),
    pfas_label = pfas
  ) %>%
  arrange(pfas) %>%
  group_by(pfas) %>%
  nest() %>%
  mutate(
    m_fit = map(data, pfas_glm_toc),
    tidy = map(m_fit, ~ broom.mixed::tidy(.x, exponentiate = TRUE)),
    glance = map(m_fit, broom.mixed::glance),
    augment = map2(m_fit, data, ~ broom.mixed::augment(.x, .y)),
    pred = map(m_fit, ~ ggpredict(.x, terms = c("TOC [0:6]", "Area"))),
    simulated = map(m_fit, ~ simulate(.x, nsim = 25, seed = 12345)),
    sim_data = map2(
      simulated, data, ~ bind_cols(.x, .y) %>%
        pivot_longer(cols = matches("sim"), names_to = "simgroup", values_to = "sim") %>%
        rename(group = Area)
    ),
    Area_model = map2(m_fit, pfas, ~ glht(.x, linfct = mcp(Area = "Tukey"))),
    # # validate the parameters:: implementation
    # Area_hypothesis = map2(m_fit, pfas, ~ glht(.x, linfct = mcp(Area = "Tukey")) %>%
    #   summary(test = adjusted(type = "single-step")) %>%
    #   tidy() %>%
    #   select(-c(term, null.value)) %>%
    #   mutate(estimate = exp(estimate))),
    reg_table = map(m_fit, ~ tbl_regression(.x, exponentiate = TRUE, tidy_fun = broom.mixed::tidy), estimate_fun = purrr::partial(style_ratio, digits = 3))
  )

pfas_w_models_toc %>% select(pfas, tidy) %>% unnest(tidy) %>% filter(term == "TOC") %>% select(pfas, term, estimate, p.value)
```


```{r model-sim-toc}

sim_data_toc <- pfas_w_models_toc %>%
  unnest(sim_data)

pred_data_toc <- pfas_w_models_toc %>% unnest(pred)

pred_data_toc %>% ggplot(aes(x, predicted)) +
  geom_smooth(color = "#AF2D2D", se = FALSE) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  geom_point(
    data = sim_data_toc,
    aes(x = TOC, y = sim),
    alpha = 0.1,
    size = 0.2,
    color = muted("red", l = 50, c = 70)
  ) +
  geom_point(aes(x = TOC, y = pfas_value),
             data = sim_data %>% distinct(sample_id3, .keep_all = TRUE)) +
  facet_grid(pfas ~ group, scales = "free") +
  xlab("TOC [%]") +
  ylab("PFAS [\u03BCg/kg]")
```

## Concentrations table

```{r}
pfas_data_0_wide %>% select(-sample_id3) %>% gt(groupname_col = "Area",rowname_col = "year") %>%
  fmt_number(columns = 2:6, decimals = 2) %>%
  fmt_number(columns = depth, decimals = 0) %>%
  fmt_number(columns = Mud, decimals = 0) %>%
  cols_label(
    longitude = md("Longitude"),
    latitude = md("Latitude")
) %>% tab_spanner(label = "Concentration [µg/kg dry weight]", columns = "PFOS":"Σ9PFAS") %>% 
  sub_values(
  columns = everything(),
  rows = everything(),
  values = "0.00",
  replacement = "-"
) #%>% 
  #gtsave("si_conc_table.docx")

```

Concentrations and Mud % for each PFAS by area and year. The highest LOQ in any sample for each PFAS is used, values below LOQ indicated with a dash.  

# Other

## Tweedie distribution

```{r}
#| fig-cap: "Simulated Tweedie distributions for \u03BC = 1, 2 and 3, illustrating property to model censored data."
#| label: fig-tweedie-sim
#simulate 1000 tweedie using mu= 1 and mu = 3:
mutibble <- rbind(tibble(mu = c(rep(1, 10000))), tibble(mu = c(rep(2, 10000))), tibble(mu = c(rep(3, 10000)))) %>% 
  mutate(
  )
simtibble <- mutibble %>%
  mutate(
    sim = rTweedie(mu = mu, p = 1.404, 0.666),
    mu = str_replace(mu, "\\d", paste("\u03BC = ", mu))
  )
simtibble %>% ggplot(aes(x = sim)) +
  geom_histogram(binwidth = 0.05, color = "black") +
  facet_wrap(~mu)+
  geom_vline(aes(xintercept = str_extract(mu, "\\d") %>% as.numeric()), linetype = "dotted", color = "red")+
  xlab("Response value")+
  ylab("Frequency [#]")
```
## Chemical compounds table
```{r}
pfas_table <- tibble(
  pfas = c(
    "PFHxA",
    "PFHpA",
    "PFOA",
    "PFNA",
    "PFDA",
    "PFUnDA",
    "PFDoDA",
    "PFTrA",
    "PFOS"
  ),
  pfas_names = c(
    "Perfluorohexanoic acid",
    "Perfluoroheptanoic acid",
    "Perfluorooctanoic acid",
    "Perfluorononanoic acid",
    "Perfluorodecanoic acid",
    "Perfluoroundecanoic acid",
    "Perfluorododecanoic acid",
    "Perfluorotridecanoic acid",
    "Perfluorooctanesulfonic acid"
  )
) %>% 
  mutate(
    pc_data = map(pfas_names, ~ pcprop_from_name(.x, property = "all"))
  ) %>%
  unnest(pc_data)
```

```{r}
#| echo: false
#| eval: false
pfas_table$CanonicalSMILES %>% map(~.x %>% structure_drawer_smiles(outdir = paste(getwd())))
```

```{r depiction-drawing}
pfas_table %>% 
  mutate(structure_depiction = CanonicalSMILES) %>% 
  select(pfas, pfas_names, CID, logP = XLogP, structure_depiction) %>% 
  gt() %>% 
  text_transform(
    locations = cells_body(columns = structure_depiction),
    fn = function(x) {
      local_image(
        filename = paste0(getwd(), "/figures/", x, ".svg"),
        height = 60
      )
    }
  ) %>% gtsave("test2.html")
# # rsvg convert
# library(rsvg)
# list.files("figures/", full.names = TRUE) %>% str_subset(".svg") %>% map(~ rsvg_pdf(.x, paste0(.x %>% str_replace(".svg", ".pdf"))))
```

## LogP vs mud coefficient
```{r}
pfas_w_models %>%
  select(pfas, m_fit) %>%
  mutate(regression_table = map(
    m_fit,
    ~ model_parameters(.x, exponentiate = TRUE) %>% add_row(
      Parameter = "(Tweedie power)",
      Coefficient = glmmTMB:::.tweedie_power(.x)
    )
  )) %>%
  unnest(regression_table) %>%
  mutate(
    Parameter = if_else(
      Component == "dispersion" &
        Parameter == "(Intercept)",
      "(Tweedie dispersion)",
      Parameter
    )
  ) %>%
  select(pfas, Parameter, Estimate = Coefficient, CI_low, CI_high, p) %>% left_join(pfas_table, by = "pfas") %>%
  filter(Parameter == "Mud") %>%
  ggplot(aes(x = XLogP, y = Estimate)) + geom_point() +
  #add geom_text of the pfas for each point:
  geom_text_repel(aes(label = pfas), ) +
  geom_errorbar(aes(ymin = CI_low, ymax = CI_high)) +
  scale_y_continuous(breaks = c(1, 1.01, 1.02, 1.03, 1.04, 1.05))
```
---
execute:
  warning: false
format:
  html:
    embed-resources: true
    code-fold: true
---

# Data cleaning

```{r setup-cleaning}
# packages
library(tidyverse)
library(readxl)
library(ggmap)
library(janitor)
library(ggrepel)
library(GGally)
library(targets)
library(gt)
library(DataExplorer)
library(patchwork)
library(ggh4x)
library(ggthemes)
library(glmmTMB)
library(DHARMa)
library(performance)
library(MASS)
library(scales)
library(viridis)
library(gtsummary)
library(ggeffects)
library(multcomp)
select <- dplyr::select

# set theme
survey_theme <- theme_few()
theme_set(survey_theme)

# to fix shifted column names
newnames <- (read_excel("data/Hele datasettet v2.xlsx", skip = 178) %>% clean_names())[1, 16:29] %>% as_vector()

# appending correct column names
raw_data <- read_excel("data/Hele datasettet v2.xlsx", skip = 178) %>%
  clean_names() %>%
  rename_with(.cols = x16:x29, ~newnames) %>%
  clean_names() %>%
  slice(-1) %>% 
  select(
    sample_id = sample,
    year = cruise_3,
    number = cruise_4,
    from_cm_o = sample_interval_top_bottom_5,
    to_cm_o = x6,
    longitude = dde,
    latitude = ddn,
    depth_m = mbsl,
    sample_id2 = x1096mc002,
    sample_id3 = sample_2,
    from_cm_i = sample_interval_top_bottom_12,
    to_cm_i = x13,
    clay_fraction,
    silt_fraction,
    clay_silt_fraction = clay_silt_percent,
    toc = toc_percent,
    pfos:pf_tri_a,
    -pf_dc_s,
    sum_9_pfas = sum_10_pfas,
  ) %>%
  filter(
    !is.na(year)
  ) %>%
  mutate(across(!matches("sample"), as.numeric)) %>% 
    #assign areas:
  mutate(area = case_when(
    row_number() %in% c(1:18) ~ "SV",
    row_number() %in% c(19:45) ~ "BH mid",
    row_number() %in% c(46:66) ~ "BH sør",
    row_number() %in% c(67:89) ~ "NH",
    row_number() %in% c(90:95) ~ "S",
    TRUE ~ "Other"
  ),
  area = as.factor(area))

## for renaming sample ids to fix inconsistencies
mareano_renamer <- function(ss_in) {
  
  sub_renamer <- function(ss_in){
  # check input
  stopifnot("requires single character string input." = length(ss_in) == 1 && is.character(ss_in))

  # for all strings remove spaces and replace BC with BX
  ss_out <- ss_in %>%
    str_replace_all("\\s", "") %>%
    str_replace_all("BC", "BX")
  # return if string do not contain MC or BX, as errors only with BX/MC
  if (str_detect(ss_out, "MC|BX", negate = TRUE)) {
    return(ss_out)}
  
  # part of name including BX/MC
  ss_prefix <- str_extract(ss_out, ".+[BXMC]+")
  # suffix-numbers with incoherent lengths
  ss_suffix <- str_extract(ss_out, "[0-9]+$")

  # change lengths
  if (str_length(ss_suffix) == 3) {
    return(ss_out)
  } else if (str_length(ss_suffix) == 2) {
    return(paste0(ss_prefix, "0", ss_suffix))
  } else if (str_length(ss_suffix) == 1) {
    return(paste0(ss_prefix, "00", ss_suffix))
  } else {
    # break with error message "suffix string not of length 1, 2 or 3":
    stop("suffix string not of length 1, 2 or 3")
  }
  }
  
  ss_out <-  map_chr(ss_in, sub_renamer)
  return(ss_out)
}

# import curated LOQs
loqs_raw <- read_excel("data/LOQs.xlsx") %>%
  clean_names() %>%
  select(-enhet) %>%
  rename(pfas = forbindelse)

loqs_years <- loqs_raw %>%
  filter(!(is.na(pfas))) %>%
  mutate(across(-pfas, ~ str_replace_all(.x, "\\<", "") %>% as.numeric()),
    pfas = make_clean_names(pfas)
  ) %>%
  rename_with(.cols = everything(), ~ str_replace(.x, "_2", "A") %>% str_replace("_3", "B")) %>%
  pivot_longer(cols = matches("\\d{4}"), names_to = "analysis_year", values_to = "loq")

loqs_samples <- loqs_raw %>%
  filter(is.na(pfas)) %>%
  rename_with(.cols = everything(), ~ str_replace(.x, "_2", "A") %>% str_replace("_3", "B")) %>%
  select(-pfas) %>%
  pivot_longer(
    cols = matches("\\d{4}"),
    names_to = "analysis_year",
    values_to = "sample_id"
  ) %>%
  drop_na() %>% 
  mutate(
    sample_id = mareano_renamer(sample_id)
  )

loqs <- left_join(
  loqs_years, loqs_samples,
  by = c("analysis_year")
)

# reshape to merge with loqs
raw_data_long <- raw_data %>%
  pivot_longer(
    cols = pfos:sum_9_pfas, names_to = "pfas", values_to = "pfas_value"
  ) %>%
  mutate(sample_id3 = mareano_renamer(sample_id3))

# merge data, assign values below LOQ
pfas_data <- left_join(raw_data_long, loqs, by = c("pfas", "sample_id3" = "sample_id")) %>%
  select(-analysis_year) %>%
  mutate(
    pfas_value = case_when(
      pfas_value < loq ~ loq / 2,
      TRUE ~ pfas_value
    )
  ) %>%
    mutate(
    above_loq = case_when(
      pfas_value < loq ~ FALSE,
      TRUE ~ TRUE
    )
    ) %>% 
  select(sample_id3, year, area, longitude, latitude, clay_silt_fraction, toc, pfas, pfas_value, loq, above_loq) %>%
  group_by(sample_id3) %>%
  mutate(
    pfas_value = if_else(
      pfas == "sum_9_pfas",
      sum(pfas_value[pfas != "sum_9_pfas"], na.rm = TRUE),
      pfas_value
    )
  ) %>%
  ungroup()

pfas_wide = pivot_wider(pfas_data %>% select(-c(loq, above_loq)), names_from = pfas, values_from = pfas_value)

# set loq to highest for each PFAS compound
pfas_data_eq <- pfas_data %>%
  group_by(pfas) %>%
  mutate(max_loq = max(loq)) %>%
  mutate(
    pfas_value = case_when(
      pfas_value < max_loq ~ max_loq / 2,
      TRUE ~ pfas_value
    )
  ) %>%
  ungroup() %>%
  group_by(sample_id3) %>%
  mutate(
    pfas_value = if_else(
      pfas == "sum_9_pfas",
      sum(pfas_value[pfas != "sum_9_pfas"], na.rm = TRUE),
      pfas_value
    )
  ) %>%
  select(-max_loq)

pfas_data_eq_wide <- pivot_wider(pfas_data_eq %>% select(-c(loq, above_loq)), names_from = pfas, values_from = pfas_value) %>% ungroup()

```

```{r map}
#| column: screen
#| out-width: 100%

map_area_conc <-
  ggmap(tar_read(stadia_map)) +
  geom_point(aes(x = longitude, y = latitude, color = sum_9_pfas, fill = sum_9_pfas, shape = area), data = pfas_data_eq_wide, position = position_dodge(width = 10), size = 2, alpha = 0.7) +
  labs(x = "Longitude [°E]", y = "Latitude [°N]") +
  scale_color_viridis(option = "magma") +
  scale_fill_viridis(option = "magma") +
  scale_shape_manual(values = c(21, 22, 23, 24, 25)) +
  #change legend label to Area and \u03A39PFAS:
  labs(color = "\u03A39PFAS", shape = "Area")+
  guides(fill = FALSE)
  

map_area_conc

```

# Todo

-   Describe strength and significant of covariates clay/silt and TOC. And relation between these.
-   Make partial residual plot correcting for CS.
-   Vise clay silt per area. Om analyse gjentatt med to områder (SV, S) tatt ut - dette endrer ikke forholdet til clay/silt.
-   Add missing longitudes
-   Hypotheses:
    -   Is there a difference in PFAS levels between the different areas, corrected for TOC and clay/silt?
    -   Describe levels of PFAS
-   Can:
    -   Partial residuals on location map, correcting for silt+clay?¨
    -   Make tables with PFAS overviews
    -   Regression model for each PFAS
    -   Separate models makes sense only with the top 3 pfas(?)

```{r}
pfas_data %>% group_by(pfas) %>% 
  summarise(
    n = sum(above_loq),
    n_samples = n_distinct(sample_id3)
  ) %>% 
  mutate(
    p = n / n_samples
  ) %>% arrange(p) %>% 
  gt() %>% 
  fmt_percent(columns = vars(p)) %>% 
  # name gt table:
  tab_header(
    title = md("Number of samples above LOQ"),
    subtitle = md("Number of samples above LOQ for each PFAS, and the proportion of samples above LOQ.")
  ) %>% 
  cols_label(
    pfas = md("**PFAS**"),
    n = md("**# samples > LOQ**"),
    n_samples = md("**# samples**"),
    p = md("**Proportion > LOQ**")
  )
```

Should set LOQ to the highest in the cases were most values are below LOQ. Otherwise LOQ is a confounder. For regression model, we then use all PFAS for the compounds combined, but can report on original LOQs.

# Model selection

Gaussian model poor fit and high AIC. Tweedie did not show a substantial improvement over a gamma model and had higher AIC, thus the simpler gamma model was chosen.

## Gaussian linear model (NOT USED)

<details>

<summary>Details</summary>

```{r fit-gaus}


fit_lm <- glmmTMB(sum_9_pfas ~ area + clay_silt_fraction, data = pfas_data_eq_wide %>% ungroup(), family = gaussian(link = "log"))

tbl_regression(fit_lm, exponentiate = TRUE, estimate_fun = purrr::partial(style_ratio, digits = 3),
         pvalue_fun = purrr::partial(style_sigfig, digits = 3)) %>% as_gt() %>%
  tab_header(
    title = md("Gaussian model with log link"),
    subtitle = md("Model for sum of 9 PFAS, with area and fraction of clay + silt as covariates."))
```

```{r sim-resid-gaus}
sim_residuals <- simulateResiduals(fittedModel = fit_lm, n = 1000)

testdisp <- testDispersion(sim_residuals, plot = FALSE)
```

```{r validation-gaus}
#| layout-ncol: 2
#| layout-nrow: 5
plotResiduals(sim_residuals, quantreg = TRUE, smoothScatter = FALSE,)
plotResiduals(sim_residuals, form = pfas_data_eq_wide$toc, xlab = "TOC")
plotQQunif(sim_residuals, testUniformity = TRUE, testOutliers = TRUE, testDispersion = TRUE)
plotResiduals(sim_residuals, form = pfas_data_eq_wide$year, xlab = "Year",)
plotResiduals(sim_residuals, form = pfas_data_eq_wide$latitude, xlab = "Latitude")
plotResiduals(sim_residuals, form = pfas_data_eq_wide$longitude, xlab = "Longitude")
plotResiduals(sim_residuals, form = pfas_data_eq_wide$area, xlab = "Area")



pred <- ggpredict(fit_lm, terms = c("clay_silt_fraction [1:100]", "area"))

pred_plot <- pred %>% ggplot(aes(x, predicted)) +
  geom_smooth() +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  geom_point(aes(x = clay_silt_fraction, y = sum_9_pfas), data = pfas_data_eq_wide %>% rename(group = area)) +
  facet_wrap(~group)
# pred_plot

simulated <- simulate(fit_lm, nsim = 100, seed = 12345)
sim_data <- bind_cols(pfas_data_eq_wide, simulated) %>%
  pivot_longer(cols = matches("sim"), names_to = "simgroup", values_to = "sim") %>%
  rename(group = area)

pred_plot + geom_point(data = sim_data, aes(x = clay_silt_fraction, y = sim), alpha = 0.1, size = 0.2, color = "pink3")

```

We have overdispersion, heteroskedasticity and observed values fall outside simulated value for S and SV.

</details>

## Gamma LOQ/2-model (FINAL)

Stepwise selection shows silt_clay to be only significant. Area included to test hypothesis. Dharma residuals are the fraction of modeled values more extreme than this value.

```{r gamma-fit}

fit_gamma <- glmmTMB((sum_9_pfas) ~ area + clay_silt_fraction, data = pfas_data_eq_wide, family = Gamma(link = "log"))

tbl_regression(fit_gamma,
  exponentiate = TRUE, estimate_fun = purrr::partial(style_ratio, digits = 3),
  pvalue_fun = purrr::partial(style_sigfig, digits = 3)
) %>%
  as_gt() %>%
  tab_header(
    title = md("Gamma model with log link"),
    subtitle = md("Model for sum of 9 PFAS, with area and faction of clay + silt as covariates.")
  )



```

```{r dispersion-test-gamma}
sim_residuals <- simulateResiduals(fittedModel = fit_gamma, n = 1000)
testDispersion(sim_residuals)
```

```{r gamma-val}
#| layout-ncol: 2
#| layout-nrow: 5



plotResiduals(sim_residuals, quantreg = TRUE, smoothScatter = FALSE,)

plotResiduals(sim_residuals, form = pfas_data_eq_wide$toc, xlab = "TOC")

plotQQunif(sim_residuals, testUniformity = TRUE, 
           testOutliers = TRUE, testDispersion = TRUE)

plotResiduals(sim_residuals, form = pfas_data_eq_wide$year, xlab = "Year",)

plotResiduals(sim_residuals, form = pfas_data_eq_wide$latitude, xlab = "Latitude")

plotResiduals(sim_residuals, form = pfas_data_eq_wide$longitude, xlab = "Longitude")

plotResiduals(sim_residuals, form = pfas_data_eq_wide$area, xlab = "Area")
```

```{r}
#| label: fig-gamma-obs-sim
#| fig-cap: "Black dots shows observed values, fitted a Gamma GLM with log link. Ribbons shows the 95% CI of the mean predicted value. Red dots shows simulated values from 100 simulations based on observed values for the covariates."
# pfas_data_eq_wide %>%
#   mutate(yhat = fitted(fit_gamma),
#          res = residuals(fit_gamma),
#         ) %>%
#   ggplot(aes(clay_silt_fraction, yhat, color = area)) + geom_point() + geom_smooth()+ geom_smooth(method = "lm",se = TRUE)+
#   geom_point(aes(clay_silt_fraction, sum_9_pfas))+
#   labs(title = "Fitted vs observed values")+
#   xlab("Clay + silt fraction")+
#   ylab("Sum of 9 PFAS")

# predict values for CIs
pred <- ggpredict(fit_gamma, terms = c("clay_silt_fraction [1:100]", "area"))
# simulate
simulated <- simulate(fit_gamma, nsim = 100, seed = 12345)
sim_data <- bind_cols(pfas_data_eq_wide, simulated) %>%
  pivot_longer(cols = matches("sim"), names_to = "simgroup", values_to = "sim") %>%
  rename(group = area)

pred_plot <- pred %>% ggplot(aes(x, predicted)) +
  geom_smooth(color = muted("red")) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  geom_point(data = sim_data, aes(x = clay_silt_fraction, y = sim), alpha = 0.1, size = 0.2, color = muted("red"))+
  geom_point(aes(x = clay_silt_fraction, y = sum_9_pfas), data = pfas_data_eq_wide %>% rename(group = area)) +
  facet_wrap(~group)+
  xlab("Clay + silt fraction [%]")+
  ylab("\u03A39PFAS")
pred_plot

```

No problems except for some spatial dependency. Observed values fall within the simulated values.

```{r}
library(broom)
glht(fit_gamma, linfct = mcp(area = "Tukey")) %>%
  # automatically Tukey-adjusted p-values in summary
  summary() %>%  tidy() %>% select(-c(term, null.value)) %>% gt() %>% tab_header(title = "Tukey post-hoc test for area") %>% 
  fmt_number(columns = 2:5,decimals = 2)

```

No substantial difference between the areas, SV is higher than NH, that could be driven primarily by three high values.

```{r}
# using same LOQs
pfas_prop <- pfas_data_eq %>%
  # for each area, calculate the proportion of each pfas:
  group_by(area, pfas) %>% 
  summarise(
    pfas_sum = sum(pfas_value, na.rm = TRUE),
  ) %>% 
  group_by(area) %>% 
  mutate(
    pfas_prop = pfas_sum / sum(pfas_sum[pfas != "sum_9_pfas"], na.rm = TRUE)
  ) %>% 
  filter(pfas != "sum_9_pfas")

ggplot(pfas_prop, aes(fill=pfas, y=pfas_prop, x=area)) + 
    geom_bar(position="stack", stat="identity")+
  scale_fill_brewer(palette="Set3")+
  xlab("Area")+ylab("Propotion")+
  #legend title PFAS:
  labs(fill = "PFAS")
  
```

## Tweedie LOQ-0-model

```{r tweedie-fit}
pfas_data_eq0 <- pfas_data %>%
  group_by(pfas) %>%
  mutate(max_loq = max(loq)) %>%
  mutate(
    pfas_value = case_when(
      pfas_value < max_loq ~ 0,
      TRUE ~ pfas_value
    )
  ) %>%
  ungroup() %>%
  group_by(sample_id3) %>%
  mutate(
    pfas_value = if_else(
      pfas == "sum_9_pfas",
      sum(pfas_value[pfas != "sum_9_pfas"], na.rm = TRUE),
      pfas_value
    )
  ) %>%
  select(-max_loq)

pfas_data_eq0_wide <- pivot_wider(pfas_data_eq0 %>% select(-c(loq, above_loq)), names_from = pfas, values_from = pfas_value) %>% ungroup()


fit_tweedie_0 <- glmmTMB((sum_9_pfas) ~ area + clay_silt_fraction, data = pfas_data_eq0_wide, family = tweedie(link = "log"))

# tbl_regression(fit_tweedie_0,
#   exponentiate = TRUE, estimate_fun = purrr::partial(style_ratio, digits = 3),
#   pvalue_fun = purrr::partial(style_sigfig, digits = 3)
# ) %>%
#   as_gt() %>%
#   tab_header(
#     title = md("Tweedie model with log link"),
#     subtitle = md("Model for sum of 9 PFAS, with area and faction of clay + silt as covariates. Below LOQ set to 0.")
#   )

summary(fit_tweedie_0)

```


```{r dispersion-test-tweedie}
sim_residuals <- simulateResiduals(fittedModel = fit_tweedie_0, n = 1000)
testDispersion(sim_residuals)
```

```{r tweedie-val}
#| layout-ncol: 2
#| layout-nrow: 5



plotResiduals(sim_residuals, quantreg = TRUE, smoothScatter = FALSE,)

plotResiduals(sim_residuals, form = pfas_data_eq0_wide$toc, xlab = "TOC")

plotQQunif(sim_residuals, testUniformity = TRUE, 
           testOutliers = TRUE, testDispersion = TRUE)

plotResiduals(sim_residuals, form = pfas_data_eq0_wide$year, xlab = "Year",)

plotResiduals(sim_residuals, form = pfas_data_eq0_wide$latitude, xlab = "Latitude")

plotResiduals(sim_residuals, form = pfas_data_eq0_wide$longitude, xlab = "Longitude")

plotResiduals(sim_residuals, form = pfas_data_eq0_wide$area, xlab = "Area")
```

```{r}
#| label: fig-tweedie-obs-sim
#| fig-cap: "Black dots shows observed values, fitted a Tweedie GLM with log link, values below LOQ set to 0. Ribbons shows the 95% CI of the mean predicted value. Red dots shows simulated values from 100 simulations based on observed values for the covariates."


# predict values for CIs
pred <- ggpredict(fit_tweedie_0, terms = c("clay_silt_fraction [1:100]", "area"))
# simulate
simulated <- simulate(fit_tweedie_0, nsim = 100, seed = 12345)
sim_data <- bind_cols(pfas_data_eq0_wide, simulated) %>%
  pivot_longer(cols = matches("sim"), names_to = "simgroup", values_to = "sim") %>%
  rename(group = area)

pred_plot <- pred %>% ggplot(aes(x, predicted)) +
  geom_smooth(color = muted("red")) +
  geom_ribbon(aes(ymin = conf.low, ymax = conf.high), alpha = 0.2) +
  geom_point(data = sim_data, aes(x = clay_silt_fraction, y = sim), alpha = 0.1, size = 0.2, color = muted("red"))+
  geom_point(aes(x = clay_silt_fraction, y = sum_9_pfas), data = pfas_data_eq0_wide %>% rename(group = area)) +
  facet_wrap(~group)+
  xlab("Clay + silt fraction [%]")+
  ylab("\u03A39PFAS")
pred_plot

```


```{r}
library(broom)
glht(fit_tweedie_0, linfct = mcp(area = "Tukey")) %>%
  # automatically Tukey-adjusted p-values in summary
  summary() %>%  tidy() %>% select(-c(term, null.value)) %>% gt() %>% tab_header(title = "Tukey post-hoc test for area") %>% 
  fmt_number(columns = 2:5,decimals = 2)

```




# Tables

```{r}
# pfas_data_eq %>% group_by(pfas, area) %>%
#   #mean, sd for each area
#   summarise(
#     mean = mean(pfas_value, na.rm = TRUE),
#     sd = sd(pfas_value, na.rm = TRUE),
#     n = n()
#   ) %>% 
#   gt(
#     rowname_col = "pfas",
#     groupname_col = "area"
#   ) %>% tab_header(title = "Summary of PFAS values by area, <LOQ = LOQ/2") %>% fmt_number(columns = 2:4,decimals = 2)
# 
# pfas_data_eq0 %>% group_by(pfas, area) %>%
#   #mean, sd for each area
#   summarise(
#     mean = mean(pfas_value, na.rm = TRUE),
#     sd = sd(pfas_value, na.rm = TRUE),
#     n = n()
#   ) %>% 
#   gt(
#     rowname_col = "pfas",
#     groupname_col = "area"
#   ) %>% tab_header(title = "Summary of PFAS values by area, <LOQ = 0") %>% fmt_number(columns = 2:4,decimals = 2)
  


pfas_data_eq0_wide %>% group_by(area) %>% 
  #mean, sd for each area for each of sum_9_pfas, toc, clay_silt_fraction:
  summarise(
    sum_9_pfas = mean(sum_9_pfas, na.rm = TRUE),
    toc = mean(toc, na.rm = TRUE),
    clay_silt_fraction = mean(clay_silt_fraction, na.rm = TRUE),
    n = n()
  ) %>% gt() %>% 
  fmt_number(columns = 2:4,decimals = 1) %>% 
  tab_spanner(label = "Mean", columns = 2:4) %>% 
  tab_header(title = "Summary of covariates by area, <LOQ = 0") %>% 
  cols_label(
    area = md("**Area**"),
    sum_9_pfas = md("**\u03A39PFAS**"),
    toc = md("**TOC**"),
    clay_silt_fraction = md("**Clay + silt %**")
  )

pfas_data_eq_wide %>% group_by(area) %>% 
  #mean, sd for each area for each of sum_9_pfas, toc, clay_silt_fraction:
  summarise(
    sum_9_pfas = mean(sum_9_pfas, na.rm = TRUE),
    toc = mean(toc, na.rm = TRUE),
    clay_silt_fraction = mean(clay_silt_fraction, na.rm = TRUE),
    n = n()
  ) %>% gt() %>% 
  fmt_number(columns = 2:4,decimals = 1) %>% 
  tab_spanner(label = "Mean", columns = 2:4) %>% 
  tab_header(title = "Summary of covariates by area, <LOQ = LOQ/2") %>% 
  cols_label(
    area = md("**Area**"),
    sum_9_pfas = md("**\u03A39PFAS**"),
    toc = md("**TOC**"),
    clay_silt_fraction = md("**Clay + silt %**")
  )
```

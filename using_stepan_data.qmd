---
execute:
  warning: false
format:
  html:
    code-fold: true
---

# PFAS survey

```{r setup-cleaning}
# packages
library(tidyverse)
library(readxl)
library(ggmap)
library(janitor)
library(ggrepel)
library(GGally)
library(targets)
library(gt)
library(DataExplorer)
library(patchwork)
library(ggh4x)
library(ggthemes)

# set theme
survey_theme <- theme_few()
theme_set(survey_theme)

# to fix shifted column names
newnames <- (read_excel("data/Hele datasettet v2.xlsx", skip = 178) %>% clean_names())[1, 16:29] %>% as_vector()

# appending correct column names
raw_data <- read_excel("data/Hele datasettet v2.xlsx", skip = 178) %>%
  clean_names() %>%
  rename_with(.cols = x16:x29, ~newnames) %>%
  clean_names() %>%
  slice(-1) %>% 
  select(
    sample_id = sample,
    year = cruise_3,
    number = cruise_4,
    from_cm_o = sample_interval_top_bottom_5,
    to_cm_o = x6,
    longitude = dde,
    latitude = ddn,
    depth_m = mbsl,
    sample_id2 = x1096mc002,
    sample_id3 = sample_2,
    from_cm_i = sample_interval_top_bottom_12,
    to_cm_i = x13,
    clay_fraction,
    silt_fraction,
    clay_silt_fraction = clay_silt_percent,
    toc = toc_percent,
    pfos:pf_tri_a,
    -pf_dc_s,
    sum_9_pfas = sum_10_pfas,
  ) %>%
  filter(
    !is.na(year)
  ) %>%
  mutate(across(!matches("sample"), as.numeric)) %>% 
    #assign areas:
  mutate(area = case_when(
    row_number() %in% c(1:18) ~ "SV",
    row_number() %in% c(19:45) ~ "BH mid",
    row_number() %in% c(46:66) ~ "BH sør",
    row_number() %in% c(67:89) ~ "NH",
    row_number() %in% c(90:95) ~ "S",
    TRUE ~ "Other"
  ),
  area = as.factor(area))
  
# raw_data %>% group_by(area) %>% 
#   summarise(
#     min_lat = min(latitude),
#     max_lat = max(latitude),
#     min_lon = min(longitude),
#     max_long = max(longitude)
#   )

```

## Todo
* Hypotheses:
  - Is there a difference in PFAS levels between the different areas, corrected for TOC and clay/silt?
  - Describe levels of PFAS
* Model:
  - PFAS ~ area + TOC + clay/silt, poisson errors.


## Data exploration

### Missing data

**sample_id3 == R3032** had a reported value that was below LOQ and is remove until the error is investigated. Other errors found in the chemical database and corrected in the enclosed data.

```{r}
plot_missing(raw_data, ggtheme = survey_theme)
```
Missing data for some variables.

### Outliers in predictor or response variables

```{r cleveland-dotplot}
raw_data %>%
  ungroup() %>%
  mutate(id = row_number()) %>% 
  select(id, year, longitude, latitude, clay_silt_fraction, toc, sum_9_pfas) %>%
  pivot_longer(cols = -id, names_to = "parameter", values_to = "value") %>%
  ggplot(aes(value, id)) +
  #reverse y axis:
  scale_y_reverse() +
  geom_point(size = 0.75) +
  facet_wrap(~parameter, scales = "free", nrow = 3, ncol = 4)
```

```{r}
plot_histogram(raw_data %>% select(year,area,longitude, latitude, clay_silt_fraction, toc, sum_9_pfas), ggtheme = survey_theme)
```
* Potential outliers in TOC.


### Dependencies

```{r}
ggmap(tar_read(stadia_map))+
  geom_point(aes(x = longitude, y = latitude, color = area), data = raw_data,)
```



```{r map-year, eval = TRUE}

loc_year_map <- ggmap(tar_read(stadia_map)) +
  geom_point(aes(x = longitude, y = latitude, color = year), alpha = 0.65, data = raw_data %>%
    mutate(across(everything(), as.numeric)), position = position_dodge(width = 0.90), size = 2) +
  # check locations of interest
  # geom_text_repel(
  #   data = quantification_classified %>% filter(isotope == "Ag" & (mass_conc_mean > mass_conc_LOD | particle_conc_mean > particle_conc_LOD)) %>%
  #     distinct(loc_address, .keep_all = TRUE),
  #   aes(x = longitude, y = latitude, label = loc_address), color = "red", size = 2
  # ) +
  labs(x = "Longitude [°E]", y = "Latitude [°N]") +
  scale_colour_gradient2(
    low = "darkblue",
    mid = "white",
    high = "red3",
    midpoint = 2015,
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "colour"
  ) +
  guides(color = guide_colorbar(title = NULL))+
  #title:
  ggtitle("Loc vs year")

year_pos <- raw_data %>% ggplot(aes(year, latitude))+geom_point()+geom_smooth()+labs(title = "Loc vs year")


loc_conc_map <-
  ggmap(tar_read(stadia_map)) +
  geom_point(aes(x = longitude, y = latitude, color = sum_9_pfas), alpha = 0.65, data = raw_data %>%
    mutate(across(everything(), as.numeric)), position = position_dodge(width = 0.90), size = 2) +
  # check locations of interest
  # geom_text_repel(
  #   data = quantification_classified %>% filter(isotope == "Ag" & (mass_conc_mean > mass_conc_LOD | particle_conc_mean > particle_conc_LOD)) %>%
  #     distinct(loc_address, .keep_all = TRUE),
  #   aes(x = longitude, y = latitude, label = loc_address), color = "red", size = 2
  # ) +
  labs(x = "Longitude [°E]", y = "Latitude [°N]") +
  scale_colour_gradient2(
    low = "darkblue",
    mid = "white",
    high = "red3",
    midpoint = 1,
    space = "Lab",
    na.value = "grey50",
    guide = "colourbar",
    aesthetics = "colour"
  ) +
  ggtitle("\u03A39PFASvs loc")

loc_conc <-  raw_data %>% ggplot(aes(sum_9_pfas, latitude))+geom_point()+geom_smooth()+labs(title = "\u03A39PFAS vs loc")
  
(loc_year_map | loc_conc_map)  + 
  plot_layout(guides = "collect") & 
  theme(legend.position = 'bottom', 
        legend.text = element_text(angle = 30)
                                )

( year_pos + loc_conc )

```


* Survey performed from `r min(raw_data$year)` to `r max(raw_data$year)`.
* Different locations at different years.
* Inorganic and organic measurements from separate cores at each location.
    - Inorganic: TOC, clay, silt, clay/silt fraction
    - Organic: Different PFAS.
* Some hotspots identified.


```{r}

ggpairs(raw_data %>% dplyr::select(year,area, clay_silt_fraction, toc, sum_9_pfas) %>% na.omit(), progress = FALSE)+theme(axis.text.x = element_text(angle = 90, hjust = 1))

```


```{r}

p1 <- raw_data %>% 
  ggplot(aes(year, sum_9_pfas)) + geom_point() + geom_smooth()+labs(title = "PFAS vs Year")

p2 <- raw_data %>% 
  ggplot(aes(toc, sum_9_pfas)) + geom_point() + geom_smooth()+labs(title = "PFAS vs TOC")


p3 <- raw_data %>% 
  ggplot(aes(clay_silt_fraction, toc)) + geom_point() + geom_smooth()+labs(title = "TOC vs clay+silt")

p4 <- raw_data %>% 
  ggplot(aes(clay_silt_fraction, sum_9_pfas)) + geom_point() + geom_smooth()+labs(title = "PFAS vs clay+silt")

(p1+p2)/(p3+p4)

```


## Modeling

* Gamma is a candidate
* As is "normal" Gaussian.
* Potential issues with zero inflation:
  - LOQ/2 if below LOQ
  - zero-inflated model
* Overdispersion using lm
  - Using glm with Gamma distribution
  - logtransforming response variable


https://stats.stackexchange.com/questions/67547/when-to-use-gamma-glms


### Check LOQ/2

Assess whether LOQ/2 is a better estimate of the true value, by looking at its distribution.

```{r}
#| fig-cap: "Polar axis plot"
raw_data %>% 
  ggplot(aes(sum_9_pfas)) + geom_histogram(binwidth = 0.025)

```



# Gaussian linear model

```{r}

fit_lm <- lm(sum_9_pfas ~ area + toc + clay_silt_fraction, data = raw_data)

fit_lm %>% summary()

fit_glm <- glm(sum_9_pfas ~ area + toc + clay_silt_fraction, data = raw_data %>% mutate(sum_9_pfas = sum_9_pfas + 0.001), family = gaussian(link = "log"))

fit_glm_gamma <- glm(sum_9_pfas ~ area + toc + clay_silt_fraction, data = raw_data %>% mutate(sum_9_pfas = sum_9_pfas + 0.001), family = Gamma(link = "log"))


```




```{r}
library(performance)

compare_performance(fit_lm, fit_glm, fit_glm_gamma, fit_glm_gamma_inv)




```



